Index: client/src/main/java/org/Client/Controllers/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Client.Controllers;\r\nimport Interfaces.RemoteRegistrationService;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.TextField;\r\nimport java.net.URL;\r\nimport java.rmi.NotBoundException;\r\nimport java.rmi.RemoteException;\r\nimport java.rmi.registry.LocateRegistry;\r\nimport java.rmi.registry.Registry;\r\nimport java.sql.Date;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class RegisterController implements Initializable {\r\n    public TextField nameField;\r\n    public TextField phoneNumberField;\r\n\r\n    public TextField emailField;\r\n    public PasswordField passwordField;\r\n    public PasswordField confirmPasswordField;\r\n    public DatePicker dateOfBirthPicker;\r\n    public RadioButton maleRadioButton;\r\n    public ComboBox<String> countryComboBox;\r\n    public Button registerButton;\r\n    RemoteRegistrationService registrationService;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        try {\r\n            Registry registry = LocateRegistry.getRegistry(\"localhost\", 1099);\r\n            registrationService = (RemoteRegistrationService) registry.lookup(\"RegistrationService\");\r\n\r\n        } catch (RemoteException | NotBoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        registerButton.setOnAction(e -> handleRegistration());\r\n    }\r\n\r\n    private void handleRegistration() {\r\n        try {\r\n            validateUserInput();\r\n            int reg = registrationService.registerUser(\r\n                    phoneNumberField.getText(),\r\n                    emailField.getText(),\r\n                    nameField.getText(),\r\n                    passwordField.getText(),\r\n                    confirmPasswordField.getText(),\r\n                    Date.valueOf(dateOfBirthPicker.getValue()),\r\n                    maleRadioButton.isSelected() ? \"Male\" : \"Female\",\r\n                    countryComboBox.getValue());\r\n\r\n            if (reg == 0) {\r\n                showAlert(\"User Already Exists\", Alert.AlertType.WARNING);\r\n            } else if (reg == 1) {\r\n                showAlert(\"User Added Successfully\", Alert.AlertType.INFORMATION);\r\n            } else if (reg == 2) {\r\n                showAlert(\"Any specific message...\", Alert.AlertType.INFORMATION);\r\n            }\r\n\r\n        } catch (RemoteException | IllegalArgumentException e) {\r\n            showAlert(e.getMessage(), Alert.AlertType.ERROR);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        nameField.clear();\r\n        phoneNumberField.clear();\r\n        passwordField.clear();\r\n        confirmPasswordField.clear();\r\n    }\r\n    private void validateUserInput() throws IllegalArgumentException {\r\n        if (nameField.getText().isEmpty() || phoneNumberField.getText().isEmpty() ||\r\n                emailField.getText().isEmpty() || passwordField.getText().isEmpty() ||\r\n                confirmPasswordField.getText().isEmpty() || dateOfBirthPicker.getValue() == null ||\r\n                countryComboBox.getValue() == null || (maleRadioButton.isSelected() && countryComboBox.getValue().isEmpty())) {\r\n            throw new IllegalArgumentException(\"Please fill in all fields\");\r\n        }\r\n        if (!passwordField.getText().equals(confirmPasswordField.getText())) {\r\n            throw new IllegalArgumentException(\"Password and Confirm Password do not match\");\r\n        }\r\n        if (!isPhoneNumberValid(phoneNumberField.getText())) {\r\n            throw new IllegalArgumentException(\"Please enter a valid phone number\");\r\n        }\r\n        if (dateOfBirthPicker.getValue().isAfter(Date.valueOf(LocalDate.now()).toLocalDate())) {\r\n            throw new IllegalArgumentException(\"Date of birth must be in the past\");\r\n        }\r\n    }\r\n    private void showAlert(String content, Alert.AlertType alertType) {\r\n        Alert alert = new Alert(alertType);\r\n        alert.setTitle(\"User Services\");\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(content);\r\n        alert.showAndWait();\r\n    }\r\n    private boolean isPhoneNumberValid(String phoneNumber) {\r\n        return phoneNumber.matches(\"[0-9]+\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/Controllers/RegisterController.java b/client/src/main/java/org/Client/Controllers/RegisterController.java
--- a/client/src/main/java/org/Client/Controllers/RegisterController.java	
+++ b/client/src/main/java/org/Client/Controllers/RegisterController.java	
@@ -1,76 +1,130 @@
+// AuthController.java
 package org.Client.Controllers;
-import Interfaces.RemoteRegistrationService;
+
+import Model.DTO.UserLoginDTO;
+import Model.DTO.UserRegistrationDTO;
+import javafx.fxml.FXML;
 import javafx.fxml.Initializable;
 import javafx.scene.control.*;
-import javafx.scene.control.TextField;
+import javafx.scene.layout.Pane;
 import java.net.URL;
-import java.rmi.NotBoundException;
 import java.rmi.RemoteException;
-import java.rmi.registry.LocateRegistry;
-import java.rmi.registry.Registry;
 import java.sql.Date;
 import java.sql.SQLException;
 import java.time.LocalDate;
 import java.util.ResourceBundle;
 
 public class RegisterController implements Initializable {
+    @FXML
+    public Label registerLabel;
+    @FXML
+    public Button signingButton;
+    @FXML
+    public PasswordField passwordLoginField;
+    @FXML
+    public TextField phoneLoginField;
+    @FXML
+    public Pane loginPage;
+    @FXML
     public TextField nameField;
+    @FXML
     public TextField phoneNumberField;
-
+    @FXML
     public TextField emailField;
+    @FXML
     public PasswordField passwordField;
+    @FXML
     public PasswordField confirmPasswordField;
+    @FXML
     public DatePicker dateOfBirthPicker;
+    @FXML
     public RadioButton maleRadioButton;
+    @FXML
     public ComboBox<String> countryComboBox;
+    @FXML
     public Button registerButton;
-    RemoteRegistrationService registrationService;
+
+    private RemoteServiceHandler remoteServiceHandler;
 
     @Override
     public void initialize(URL url, ResourceBundle resourceBundle) {
+        remoteServiceHandler = RemoteServiceHandler.getInstance();
+        signingButton.setOnAction((e) -> handleSignIn());
+        registerButton.setOnAction((e) -> handleRegistration());
+        registerLabel.setOnMouseClicked(e -> loginPage.toFront());
+    }
+
+    private void handleSignIn() {
         try {
-            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
-            registrationService = (RemoteRegistrationService) registry.lookup("RegistrationService");
+            validateUserInputLogin();
+
+            String phoneNumber = phoneLoginField.getText();
+            String password = passwordLoginField.getText();
+            UserLoginDTO userLogin = new UserLoginDTO(phoneNumber, password);
 
-        } catch (RemoteException | NotBoundException e) {
-            throw new RuntimeException(e);
+            int loginResult = remoteServiceHandler.getRemoteLoginService().loginUser(userLogin);
+            handleLoginResult(loginResult);
+
+        }catch (IllegalArgumentException e) {
+            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
+        } catch (RemoteException e) {
+            handleException("Error during login", e);
+        } finally {
+            clearLoginFields();
         }
-        registerButton.setOnAction(e -> handleRegistration());
     }
 
     private void handleRegistration() {
         try {
             validateUserInput();
-            int reg = registrationService.registerUser(
-                    phoneNumberField.getText(),
-                    emailField.getText(),
-                    nameField.getText(),
-                    passwordField.getText(),
-                    confirmPasswordField.getText(),
-                    Date.valueOf(dateOfBirthPicker.getValue()),
-                    maleRadioButton.isSelected() ? "Male" : "Female",
-                    countryComboBox.getValue());
+
+            String phoneNumber = phoneNumberField.getText();
+            String name = nameField.getText();
+            String email = emailField.getText();
+            String password = passwordField.getText();
+            Date dateOfBirth = Date.valueOf(dateOfBirthPicker.getValue());
+            String gender = maleRadioButton.isSelected() ? "Male" : "Female";
+            String country = countryComboBox.getValue();
 
-            if (reg == 0) {
-                showAlert("User Already Exists", Alert.AlertType.WARNING);
-            } else if (reg == 1) {
-                showAlert("User Added Successfully", Alert.AlertType.INFORMATION);
-            } else if (reg == 2) {
-                showAlert("Any specific message...", Alert.AlertType.INFORMATION);
-            }
+            UserRegistrationDTO userRegistrationDTO = new UserRegistrationDTO(
+                    phoneNumber, name, email, password, gender, country, dateOfBirth
+            );
+
+            int registrationResult = remoteServiceHandler.getRegistrationService().registerUser(userRegistrationDTO);
+            handleRegistrationResult(registrationResult);
+
+        } catch (IllegalArgumentException e) {
+            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
+        } catch (RemoteException | SQLException e) {
+            handleException("Error during registration", e);
+        } finally {
+            clearRegistrationFields();
+        }
+    }
 
-        } catch (RemoteException | IllegalArgumentException e) {
-            showAlert(e.getMessage(), Alert.AlertType.ERROR);
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
+    private void handleLoginResult(int loginResult) {
+        if (loginResult == 0) {
+            remoteServiceHandler.showAlert("Login Successful", Alert.AlertType.INFORMATION);
+        } else if (loginResult == 1) {
+            remoteServiceHandler.showAlert("Invalid Phone Number or Password", Alert.AlertType.WARNING);
+        } else {
+            remoteServiceHandler.showAlert("User Services Failed", Alert.AlertType.ERROR);
         }
+    }
 
-        nameField.clear();
-        phoneNumberField.clear();
-        passwordField.clear();
-        confirmPasswordField.clear();
+    private void handleRegistrationResult(int registrationResult) {
+        if (registrationResult == 0) {
+            remoteServiceHandler.showAlert("User is Already Existed", Alert.AlertType.INFORMATION);
+        } else if (registrationResult == 1) {
+            remoteServiceHandler.showAlert("Sign Up Successfully", Alert.AlertType.INFORMATION);
+        }
     }
-    private void validateUserInput() throws IllegalArgumentException {
+
+    private void handleException(String message, Exception exception) {
+        remoteServiceHandler.showAlert(message + ": " + exception.getMessage(), Alert.AlertType.ERROR);
+    }
+
+    private void validateUserInput() {
         if (nameField.getText().isEmpty() || phoneNumberField.getText().isEmpty() ||
                 emailField.getText().isEmpty() || passwordField.getText().isEmpty() ||
                 confirmPasswordField.getText().isEmpty() || dateOfBirthPicker.getValue() == null ||
@@ -87,15 +141,29 @@
             throw new IllegalArgumentException("Date of birth must be in the past");
         }
     }
-    private void showAlert(String content, Alert.AlertType alertType) {
-        Alert alert = new Alert(alertType);
-        alert.setTitle("User Services");
-        alert.setHeaderText(null);
-        alert.setContentText(content);
-        alert.showAndWait();
+    private void validateUserInputLogin() {
+        if (phoneLoginField.getText().isEmpty() || passwordLoginField.getText().isEmpty()) {
+            throw new IllegalArgumentException("Please enter both phone number and password");
+        }
+        if (!isPhoneNumberValid(phoneLoginField.getText())) {
+            throw new IllegalArgumentException("Please enter a valid phone number");
+        }
     }
     private boolean isPhoneNumberValid(String phoneNumber) {
         return phoneNumber.matches("[0-9]+");
     }
 
+    private void clearLoginFields() {
+        phoneLoginField.clear();
+        passwordLoginField.clear();
+    }
+
+    private void clearRegistrationFields() {
+        nameField.clear();
+        phoneNumberField.clear();
+        emailField.clear();
+        passwordField.clear();
+        confirmPasswordField.clear();
+        dateOfBirthPicker.setValue(null);
+    }
 }
