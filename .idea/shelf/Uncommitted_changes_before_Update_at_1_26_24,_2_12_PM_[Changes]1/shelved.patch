Index: server/src/main/java/org/Server/Service/User/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service.User;\n\nimport Model.DTO.UserLoginDTO;\nimport Model.DTO.UserRegistrationDTO;\nimport Model.Entities.User;\nimport Model.Enums.StatusEnum;\nimport org.Server.Repository.UserRepository;\nimport org.Server.Service.UserSession;\n\nimport java.rmi.RemoteException;\nimport java.sql.SQLException;\n\npublic class UserService {\n    private final UserRepository userRepository;\n    public UserService(UserRepository userRepository) throws RemoteException {\n        super();\n        this.userRepository = userRepository;\n    }\n    public boolean registerUser(User user) throws RemoteException {\n        try {\n            userRepository.save(user);\n            System.out.println(\"User registered successfully: \" + user.getPhoneNumber());\n            return true;\n        } catch (SQLException e) {\n            handleSQLException(\"Error registering user\", e);\n        }\n        return false;\n    }\n\n    public boolean signInUser(UserLoginDTO userLoginDTO) throws SQLException, RemoteException {\n        try {\n            User signedUser = userRepository.findById(userLoginDTO.getPhoneNumber());\n\n            if (signedUser != null && signedUser.getPassword().equals(userLoginDTO.getPassword())) {\n                userRepository.updateStatus(userLoginDTO.getPhoneNumber(), StatusEnum.ONLINE);\n\n                UserSession.setCurrentUser(signedUser);\n                System.out.println(\"User signed in successfully: \" + userLoginDTO.getPhoneNumber());\n                return true;\n            }\n        } catch (SQLException e) {\n            handleSQLException(\"Error signing in user\", e);\n        }\n        return false;\n    }\n\n    public User existsById(String phoneNumber) throws SQLException {\n        return userRepository.findById(phoneNumber);\n    }\n\n    private void handleSQLException(String message, SQLException e) {\n        System.err.println(message);\n        e.printStackTrace();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/User/UserService.java b/server/src/main/java/org/Server/Service/User/UserService.java
--- a/server/src/main/java/org/Server/Service/User/UserService.java	
+++ b/server/src/main/java/org/Server/Service/User/UserService.java	
@@ -1,55 +1,49 @@
 package org.Server.Service.User;
 
+import Exceptions.CustomException;
+import Interfaces.RemoteUserService;
 import Model.DTO.UserLoginDTO;
 import Model.DTO.UserRegistrationDTO;
-import Model.Entities.User;
-import Model.Enums.StatusEnum;
+import org.Server.RepoInterfaces.UserRepoInterface;
 import org.Server.Repository.UserRepository;
-import org.Server.Service.UserSession;
-
+import org.Server.ServerModels.ServerEntities.User;
 import java.rmi.RemoteException;
+import java.rmi.server.UnicastRemoteObject;
 import java.sql.SQLException;
 
-public class UserService {
-    private final UserRepository userRepository;
-    public UserService(UserRepository userRepository) throws RemoteException {
+public class UserService extends UnicastRemoteObject implements RemoteUserService {
+
+    RegistrationService registrationService;
+    LoginService loginService;
+    UserRepoInterface userRepository;
+    public UserService() throws RemoteException {
         super();
-        this.userRepository = userRepository;
+        userRepository = new UserRepository();
+        registrationService = new RegistrationService((UserRepository)userRepository);
+        loginService = new LoginService((UserRepository) userRepository);
     }
-    public boolean registerUser(User user) throws RemoteException {
+
+    @Override
+    public boolean registerUser(UserRegistrationDTO user) throws RemoteException {
         try {
-            userRepository.save(user);
-            System.out.println("User registered successfully: " + user.getPhoneNumber());
-            return true;
-        } catch (SQLException e) {
-            handleSQLException("Error registering user", e);
+            return registrationService.registerUser(user);
+        } catch (CustomException | SQLException e) {
+            throw new RuntimeException(e);
         }
-        return false;
     }
 
-    public boolean signInUser(UserLoginDTO userLoginDTO) throws SQLException, RemoteException {
+    public boolean signInUser(UserLoginDTO userLoginDTO) throws RemoteException {
+        return loginService.loginUser(userLoginDTO);
+    }
+    public User existsByPhoneNumber(String phone){
         try {
-            User signedUser = userRepository.findById(userLoginDTO.getPhoneNumber());
-
-            if (signedUser != null && signedUser.getPassword().equals(userLoginDTO.getPassword())) {
-                userRepository.updateStatus(userLoginDTO.getPhoneNumber(), StatusEnum.ONLINE);
-
-                UserSession.setCurrentUser(signedUser);
-                System.out.println("User signed in successfully: " + userLoginDTO.getPhoneNumber());
-                return true;
-            }
+            return userRepository.findByPhoneNumber(phone);
         } catch (SQLException e) {
-            handleSQLException("Error signing in user", e);
+            throw new RuntimeException(e);
         }
-        return false;
-    }
 
-    public User existsById(String phoneNumber) throws SQLException {
-        return userRepository.findById(phoneNumber);
     }
 
-    private void handleSQLException(String message, SQLException e) {
-        System.err.println(message);
-        e.printStackTrace();
-    }
+
+
 }
Index: client/src/main/java/org/Client/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/App.java b/client/src/main/java/org/Client/ClientApplication.java
rename from client/src/main/java/org/Client/App.java
rename to client/src/main/java/org/Client/ClientApplication.java
--- a/client/src/main/java/org/Client/App.java	
+++ b/client/src/main/java/org/Client/ClientApplication.java	
@@ -5,7 +5,7 @@
 import org.Client.Models.Model;
 
 
-public class App extends Application {
+public class ClientApplication extends Application {
 
     @Override
     public void start(Stage stage) {
@@ -13,6 +13,6 @@
 
     }
     public static void main(String[] args) {
-        launch(App.class, args);
+        launch(ClientApplication.class, args);
     }
 }
Index: server/src/main/java/org/Server/Repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.DTO.UserRegistrationDTO;\nimport Model.Entities.User;\nimport Model.Enums.StatusEnum;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserRepository implements Repository<User, String> {\n    private final Connection myConnection;\n\n    public UserRepository(Connection myConnection) {\n        this.myConnection = myConnection;\n    }\n\n    @Override\n    public void save(User user) throws SQLException {\n        String query = \"INSERT INTO UserAccounts (PhoneNumber, DisplayName, EmailAddress, PasswordHash, Gender, Country, DateOfBirth, Bio, UserStatus, UserMode, LastLogin) \" +\n                \"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setString(1, user.getPhoneNumber());\n            preparedStatement.setString(2, user.getDisplayName());\n            preparedStatement.setString(3, user.getEmailAddress());\n\n            preparedStatement.setString(4, user.getPassword()); // Use getPasswordHash instead of getPassword\n            preparedStatement.setString(5, user.getGender());\n            preparedStatement.setString(6, user.getCountry());\n            preparedStatement.setDate(7, new Date(user.getDateOfBirth().getTime())); // Convert Date to java.sql.Date\n            preparedStatement.setString(8, user.getBio());\n            preparedStatement.setString(9, user.getUserStatus());\n            preparedStatement.setString(10, user.getUserMode());\n            preparedStatement.setTimestamp(11, user.getLastLogin());\n\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public User findById(String phoneNumber) throws SQLException {\n        String query = \"SELECT * FROM UserAccounts WHERE PhoneNumber = ?\";\n        User user = null;\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setString(1, phoneNumber);\n\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                if (resultSet.next()) {\n                    user = getUserFromResultSet(resultSet);\n                }\n            }\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return user;\n    }\n    @Override\n    public void deleteById(String s) throws SQLException {\n\n    }\n\n\n    @Override\n    public List<User> findAll() throws SQLException {\n        String query = \"SELECT * FROM UserAccounts\";\n        List<User> userList = new ArrayList<>();\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query);\n             ResultSet resultSet = preparedStatement.executeQuery()) {\n\n            while (resultSet.next()) {\n                userList.add(getUserFromResultSet(resultSet));\n            }\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return userList;\n    }\n    public void updateStatus(String phoneNumber, StatusEnum status) throws SQLException {\n        String query = \"UPDATE Users SET Status=? WHERE PhoneNumber=?\";\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setString(1, status.name());\n            preparedStatement.setString(2, phoneNumber);\n\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public void update(String phoneNumber, String fieldName, String value) throws SQLException {\n        String query = \"UPDATE UserAccounts SET \" + fieldName + \"=? WHERE PhoneNumber=?\";\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setString(1, value);\n            preparedStatement.setString(2, phoneNumber);\n\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private User getUserFromResultSet(ResultSet resultSet) throws SQLException {\n        User user =  new User(\n                resultSet.getString(\"PhoneNumber\"),\n                resultSet.getString(\"DisplayName\"),\n                resultSet.getString(\"EmailAddress\"),\n                null,  // You may need to handle profile picture separately\n                resultSet.getString(\"PasswordHash\"),  // Use PasswordHash instead of Password\n                resultSet.getString(\"Gender\"),\n                resultSet.getString(\"Country\"),\n                resultSet.getDate(\"DateOfBirth\"),\n                resultSet.getString(\"Bio\"),\n                resultSet.getString(\"UserStatus\"),\n                resultSet.getString(\"UserMode\"),\n                resultSet.getTimestamp(\"LastLogin\")\n        );\n        user.setUserID(resultSet.getInt(\"UserID\"));\n\n        return user;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/UserRepository.java b/server/src/main/java/org/Server/Repository/UserRepository.java
--- a/server/src/main/java/org/Server/Repository/UserRepository.java	
+++ b/server/src/main/java/org/Server/Repository/UserRepository.java	
@@ -1,19 +1,18 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.DTO.UserRegistrationDTO;
-import Model.Entities.User;
-import Model.Enums.StatusEnum;
+import org.Server.RepoInterfaces.UserRepoInterface;
+import org.Server.ServerModels.ServerEntities.User;
+import org.Server.ServerModels.Enums.StatusEnum;
 
 import java.sql.*;
 import java.util.ArrayList;
 import java.util.List;
 
-public class UserRepository implements Repository<User, String> {
+public class UserRepository implements UserRepoInterface {
     private final Connection myConnection;
 
-    public UserRepository(Connection myConnection) {
-        this.myConnection = myConnection;
+    public UserRepository() {
+        myConnection = DatabaseConnectionManager.getInstance().getMyConnection();
     }
 
     @Override
@@ -41,8 +40,8 @@
         }
     }
 
-    @Override
-    public User findById(String phoneNumber) throws SQLException {
+
+    public User findByPhoneNumber(String phoneNumber) throws SQLException {
         String query = "SELECT * FROM UserAccounts WHERE PhoneNumber = ?";
         User user = null;
 
@@ -62,7 +61,27 @@
         return user;
     }
     @Override
-    public void deleteById(String s) throws SQLException {
+    public User findById(Integer id) throws SQLException {
+        String query = "SELECT * FROM UserAccounts WHERE userID = ?";
+        User user = null;
+
+        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {
+            preparedStatement.setInt(1, id);
+
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    user = getUserFromResultSet(resultSet);
+                }
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return user;
+    }
+    @Override
+    public void deleteById(Integer id) throws SQLException {
 
     }
 
@@ -86,7 +105,7 @@
         return userList;
     }
     public void updateStatus(String phoneNumber, StatusEnum status) throws SQLException {
-        String query = "UPDATE Users SET Status=? WHERE PhoneNumber=?";
+        String query = "UPDATE UserAccounts SET UserMode=? WHERE PhoneNumber=?";
 
         try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {
             preparedStatement.setString(1, status.name());
Index: server/src/main/java/org/Server/Service/User/LoginService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service.User;\n\nimport Interfaces.RemoteLoginService;\nimport Model.DTO.UserLoginDTO;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\n\npublic class LoginService extends UnicastRemoteObject implements RemoteLoginService {\n\n    private final UserService userService;\n\n    public LoginService(UserService userService) throws RemoteException {\n        super();\n        this.userService = userService;\n    }\n    @Override\n    public int loginUser(UserLoginDTO userLoginDTO) throws RemoteException {\n        try {\n            if (userService.signInUser(userLoginDTO))\n                return 0;\n            else\n                return 1;\n        }\n        catch (Exception e) {\n            return 2;\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/User/LoginService.java b/server/src/main/java/org/Server/Service/User/LoginService.java
--- a/server/src/main/java/org/Server/Service/User/LoginService.java	
+++ b/server/src/main/java/org/Server/Service/User/LoginService.java	
@@ -1,31 +1,46 @@
 package org.Server.Service.User;
 
 import Interfaces.RemoteLoginService;
+import org.Server.RepoInterfaces.UserRepoInterface;
 import Model.DTO.UserLoginDTO;
-
+import org.Server.ServerModels.ServerEntities.User;
+import org.Server.ServerModels.Enums.StatusEnum;
+import org.Server.Repository.UserRepository;
+import org.Server.Service.UserSession;
 import java.rmi.RemoteException;
-import java.rmi.server.UnicastRemoteObject;
+import java.sql.SQLException;
 
-public class LoginService extends UnicastRemoteObject implements RemoteLoginService {
+public class LoginService implements RemoteLoginService {
 
-    private final UserService userService;
 
-    public LoginService(UserService userService) throws RemoteException {
+    UserRepoInterface userRepository;
+
+    public LoginService(UserRepository userRepository) throws RemoteException {
         super();
-        this.userService = userService;
+        this.userRepository = userRepository;
     }
-    @Override
-    public int loginUser(UserLoginDTO userLoginDTO) throws RemoteException {
+
+    public boolean loginUser(UserLoginDTO userLoginDTO) throws RemoteException {
         try {
-            if (userService.signInUser(userLoginDTO))
-                return 0;
-            else
-                return 1;
-        }
-        catch (Exception e) {
-            return 2;
+            User signedUser = userRepository.findByPhoneNumber(userLoginDTO.getPhoneNumber());
+
+            if (signedUser != null && signedUser.getPassword().equals(userLoginDTO.getPassword())) {
+                System.out.println("user phone" + userLoginDTO.getPhoneNumber());
+                userRepository.updateStatus(userLoginDTO.getPhoneNumber(), StatusEnum.ONLINE);
+
+                UserSession.setCurrentUser(signedUser);
+                System.out.println("User signed in successfully: " + userLoginDTO.getPhoneNumber());
+                return true;
+
+            }
+        } catch (SQLException e) {
+            handleSQLException(e);
         }
+        return false;
     }
-
+    private void handleSQLException(SQLException e) {
+        System.err.println("Error signing in user");
+        e.printStackTrace();
+    }
 
 }
Index: server/src/main/java/org/Server/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/App.java b/server/src/main/java/org/Server/ServerApplication.java
rename from server/src/main/java/org/Server/App.java
rename to server/src/main/java/org/Server/ServerApplication.java
--- a/server/src/main/java/org/Server/App.java	
+++ b/server/src/main/java/org/Server/ServerApplication.java	
@@ -1,33 +1,20 @@
 package org.Server;
 
-import Interfaces.RemoteLoginService;
-import Interfaces.RemoteRegistrationService;
-import Interfaces.ServiceFactoryI;
 import javafx.application.Application;
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
-import org.Server.Repository.DatabaseConnectionManager;
-import org.Server.Repository.UserRepository;
-import org.Server.Service.Factories.ServiceFactory;
-import org.Server.Service.User.UserService;
 
-import java.rmi.registry.LocateRegistry;
-import java.rmi.registry.Registry;
-
-public class App extends Application {
+public class ServerApplication extends Application {
     private Stage stage;
     public static void main(String[] args) {
-        launch(App.class, args);
+        launch(ServerApplication.class, args);
     }
-
     @Override
     public void start(Stage stage) throws Exception {
-        FXMLLoader loader = new FXMLLoader (getClass().getResource("/fxml/ServerGUI.fxml"));
+        FXMLLoader loader = new FXMLLoader (getClass().getResource("/ServerFxml/ServerGUI.fxml"));
         sceneMaker(loader);
-
     }
-
     private void sceneMaker(FXMLLoader loader) {
         Scene scene = null;
         try{
@@ -41,7 +28,7 @@
             stage.setMinHeight(600);
         }
         stage.setScene(scene);
-        stage.setTitle("Chat App");
+        stage.setTitle("Chat ServerApplication");
         stage.show();
         stage.setResizable(true);
     }
Index: server/src/main/java/org/Server/Service/User/RegistrationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service.User;\n\nimport Interfaces.RemoteRegistrationService;\nimport Model.DTO.UserRegistrationDTO;\n\nimport java.rmi.RemoteException;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.sql.Date;\nimport java.sql.SQLException;\n\npublic class RegistrationService extends UnicastRemoteObject implements RemoteRegistrationService {\n    private final UserService userService;\n\n    public RegistrationService(UserService userService) throws RemoteException {\n        super();\n        this.userService = userService;\n    }\n    @Override\n    public int registerUser(UserRegistrationDTO userDTO)\n            throws RemoteException, SQLException {\n\n        if (userService.existsById(userDTO.getPhoneNumber()) != null) {\n            return 0;\n        }\n        if (userService.registerUser(userDTO.toUser())) {\n            return 1;\n        }\n            throw new SQLException(\"Can't Save New User\");\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/User/RegistrationService.java b/server/src/main/java/org/Server/Service/User/RegistrationService.java
--- a/server/src/main/java/org/Server/Service/User/RegistrationService.java	
+++ b/server/src/main/java/org/Server/Service/User/RegistrationService.java	
@@ -1,31 +1,47 @@
 package org.Server.Service.User;
 
+import Exceptions.CustomException;
 import Interfaces.RemoteRegistrationService;
 import Model.DTO.UserRegistrationDTO;
+import org.Server.ServerModels.ServerEntities.User;
+import org.Server.RepoInterfaces.UserRepoInterface;
+import org.Server.Repository.UserRepository;
 
+import java.io.Serializable;
 import java.rmi.RemoteException;
-import java.rmi.server.UnicastRemoteObject;
-import java.sql.Date;
 import java.sql.SQLException;
 
-public class RegistrationService extends UnicastRemoteObject implements RemoteRegistrationService {
-    private final UserService userService;
+public class RegistrationService implements RemoteRegistrationService {
+    UserRepoInterface userRepository;
 
-    public RegistrationService(UserService userService) throws RemoteException {
+    public RegistrationService(UserRepository userRepository) throws RemoteException {
         super();
-        this.userService = userService;
+        this.userRepository = userRepository;
+
     }
-    @Override
-    public int registerUser(UserRegistrationDTO userDTO)
-            throws RemoteException, SQLException {
+    public boolean registerUser(UserRegistrationDTO user) throws CustomException, SQLException {
 
-        if (userService.existsById(userDTO.getPhoneNumber()) != null) {
-            return 0;
+        if (userRepository.findByPhoneNumber(user.getPhoneNumber()) != null) {
+            return false;
         }
-        if (userService.registerUser(userDTO.toUser())) {
-            return 1;
-        }
-            throw new SQLException("Can't Save New User");
+        else userRepository.save(toUser(user));
+        return true;
+    }
+    public User toUser(UserRegistrationDTO userD) {
+        return new User(// Assuming userID is not available at the time of registration or set to 0 as a placeholder
+                userD.getPhoneNumber(),
+                userD.getDisplayName(),
+                userD.getEmailAddress(),
+                null,  // You may need to handle profile picture separately
+                userD.getPasswordHash(),
+                userD.getGender(),
+                userD.getCountry(),
+                userD.getDateOfBirth(),
+                null,  // bio is not available at the time of registration
+                "Available",  // Assuming default user status is "Offline"
+                "Offline",  // Assuming default user mode is "Offline"
+                null  // lastLogin is not available at the time of registration
+        );
     }
 }
 
Index: client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// RemoteServiceHandler.java\npackage org.Client.Controllers;\n\nimport Interfaces.RemoteLoginService;\nimport Interfaces.RemoteRegistrationService;\nimport javafx.scene.control.Alert;\n\nimport java.rmi.NotBoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\n\npublic class RemoteServiceHandler {\n\n    private Registry registry;\n    private static RemoteServiceHandler remoteServiceHandler;\n\n    private RemoteServiceHandler(){}\n\n    public static RemoteServiceHandler getInstance(){\n        if(remoteServiceHandler == null){\n            remoteServiceHandler = new RemoteServiceHandler();\n        }\n        return remoteServiceHandler;\n    }\n\n    public RemoteLoginService getRemoteLoginService() {\n        RemoteLoginService remoteLoginService;\n        try {\n            registry = LocateRegistry.getRegistry(\"localhost\", 1099);\n            remoteLoginService = (RemoteLoginService) registry.lookup(\"LoginService\");\n        } catch (RemoteException | NotBoundException e) {\n            throw new RuntimeException(e);\n        }\n        return remoteLoginService;\n    }\n\n    public RemoteRegistrationService getRegistrationService() {\n        RemoteRegistrationService registrationService;\n        try {\n            registry = LocateRegistry.getRegistry(\"localhost\", 1099);\n            registrationService = (RemoteRegistrationService) registry.lookup(\"RegistrationService\");\n        } catch (RemoteException | NotBoundException e) {\n            throw new RuntimeException(e);\n        }\n        return registrationService;\n    }\n\n    public void showAlert(String content, Alert.AlertType alertType) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(\"User Services\");\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java b/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java
--- a/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java	
+++ b/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java	
@@ -3,6 +3,7 @@
 
 import Interfaces.RemoteLoginService;
 import Interfaces.RemoteRegistrationService;
+import Interfaces.RemoteUserService;
 import javafx.scene.control.Alert;
 
 import java.rmi.NotBoundException;
@@ -15,36 +16,32 @@
     private Registry registry;
     private static RemoteServiceHandler remoteServiceHandler;
 
-    private RemoteServiceHandler(){}
+    private RemoteServiceHandler(){
+        try {
+            registry = LocateRegistry.getRegistry("localhost", 1099);
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+    }
 
     public static RemoteServiceHandler getInstance(){
         if(remoteServiceHandler == null){
             remoteServiceHandler = new RemoteServiceHandler();
         }
+
         return remoteServiceHandler;
     }
 
-    public RemoteLoginService getRemoteLoginService() {
-        RemoteLoginService remoteLoginService;
-        try {
-            registry = LocateRegistry.getRegistry("localhost", 1099);
-            remoteLoginService = (RemoteLoginService) registry.lookup("LoginService");
-        } catch (RemoteException | NotBoundException e) {
-            throw new RuntimeException(e);
-        }
-        return remoteLoginService;
-    }
-
-    public RemoteRegistrationService getRegistrationService() {
-        RemoteRegistrationService registrationService;
+    public RemoteUserService getRemoteUserService() {
+        RemoteUserService remoteUserService;
         try {
-            registry = LocateRegistry.getRegistry("localhost", 1099);
-            registrationService = (RemoteRegistrationService) registry.lookup("RegistrationService");
+            remoteUserService = (RemoteUserService) registry.lookup("UserServices");
         } catch (RemoteException | NotBoundException e) {
             throw new RuntimeException(e);
         }
-        return registrationService;
+        return remoteUserService;
     }
+
 
     public void showAlert(String content, Alert.AlertType alertType) {
         Alert alert = new Alert(alertType);
Index: server/src/main/java/org/Server/Service/Factories/ServiceFactory.java
===================================================================
diff --git a/server/src/main/java/org/Server/Service/Factories/ServiceFactory.java b/server/src/main/java/org/Server/Service/Factories/ServiceFactory.java
deleted file mode 100644
--- a/server/src/main/java/org/Server/Service/Factories/ServiceFactory.java	
+++ /dev/null	
@@ -1,23 +0,0 @@
-package org.Server.Service.Factories;
-
-import Interfaces.ServiceFactoryI;
-
-import org.Server.Repository.UserRepository;
-import org.Server.Service.User.UserService;
-
-import java.rmi.RemoteException;
-import java.rmi.server.UnicastRemoteObject;
-import java.sql.Connection;
-
-public class ServiceFactory extends UnicastRemoteObject implements ServiceFactoryI {
-
-    UserService userService;
-    public ServiceFactory(UserService userService) throws RemoteException {
-        super();
-        this.userService = userService;
-    }
-    public UserServiceFactory createUserService() throws RemoteException {
-        return new UserServiceFactory(userService);
-    }
-
-}
Index: client/src/main/resources/fxml/Auth.fxml
===================================================================
diff --git a/client/src/main/resources/fxml/Auth.fxml b/client/src/main/resources/fxml/Auth.fxml
deleted file mode 100644
--- a/client/src/main/resources/fxml/Auth.fxml	
+++ /dev/null	
@@ -1,133 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import java.lang.*?>
-<?import javafx.collections.*?>
-<?import javafx.geometry.*?>
-<?import javafx.scene.*?>
-<?import javafx.scene.control.*?>
-<?import javafx.scene.layout.*?>
-<?import javafx.scene.text.*?>
-
-<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" prefHeight="500.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.AuthController">
-   <StackPane layoutX="200.0" prefHeight="500.0" prefWidth="600.0">
-      <children>
-         <Pane fx:id="loginPage" prefHeight="500.0" prefWidth="569.0" style="-fx-background-color: white;">
-            <children>
-
-                <GridPane alignment="CENTER" hgap="20" layoutX="78.0" layoutY="43.0" prefHeight="400.0" prefWidth="400.0" stylesheets="@../styles/Register.css" vgap="20">
-                    <padding>
-                        <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
-                    </padding>
-
-                    <columnConstraints>
-                        <ColumnConstraints maxWidth="150.0" minWidth="114.0" prefWidth="146.0" />
-                        <ColumnConstraints maxWidth="205.0" minWidth="169.0" prefWidth="173.0" />
-                    </columnConstraints>
-
-                    <Label text="Full Name" textFill="#4d2890" />
-                    <TextField fx:id="nameField" GridPane.columnIndex="1">
-                     <styleClass>
-                        <String fx:value="text-field" />
-                        <String fx:value="radio-button" />
-                     </styleClass>
-                  </TextField>
-
-                    <Label stylesheets="@../styles/Register.css" text="Phone Number" textFill="#4d2890" GridPane.rowIndex="1" />
-                    <TextField fx:id="phoneNumberField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
-
-                    <Label text="Email" textFill="#4d2890" GridPane.rowIndex="2" />
-                    <TextField fx:id="emailField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
-
-                    <Label text="Password" textFill="#4d2890" GridPane.rowIndex="3" />
-                    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
-
-                    <Label text="Confirm Password" textFill="#4d2890" GridPane.rowIndex="4" />
-                    <PasswordField fx:id="confirmPasswordField" GridPane.columnIndex="1" GridPane.rowIndex="4" />
-
-                    <Label text="Date of Birth" textFill="#4d2890" GridPane.rowIndex="5" />
-                    <DatePicker fx:id="dateOfBirthPicker" GridPane.columnIndex="1" GridPane.rowIndex="5" />
-
-                    <Label text="Gender" textFill="#4d2890" GridPane.rowIndex="6" />
-                    <HBox spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="6">
-                        <RadioButton fx:id="maleRadioButton" text="Male" textFill="#4d2890" />
-                        <RadioButton text="Female" textFill="#4d2890" />
-                    </HBox>
-
-                    <Label text="Country" textFill="#4d2890" GridPane.rowIndex="7" />
-
-                    <ComboBox fx:id="countryComboBox" prefHeight="24.0" prefWidth="198.0" promptText="Select Country" GridPane.columnIndex="1" GridPane.rowIndex="7">
-                        <items>
-                            <FXCollections fx:factory="observableArrayList">
-                                <String fx:value="United States" />
-                                <String fx:value="United Kingdom" />
-                                <String fx:value="Canada" />
-
-                            </FXCollections>
-                        </items>
-                    </ComboBox>
-
-                  <styleClass>
-                     <String fx:value="text-field" />
-                     <String fx:value="label" />
-                  </styleClass>
-                  <rowConstraints>
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                  </rowConstraints>
-                </GridPane>
-               <Button fx:id="registerButton" layoutX="204.0" layoutY="436.0" mnemonicParsing="false" prefHeight="28.0" prefWidth="135.0" styleClass="ezzo" stylesheets="@../styles/Register.css" text="Register" />
-                <Text fill="#4d2890" layoutX="188.0" layoutY="52.0" nodeOrientation="LEFT_TO_RIGHT" smooth="false" stroke="BLACK" strokeType="OUTSIDE" strokeWidth="0.0" text="Registration" textAlignment="CENTER">
-                    <font>
-                        <Font name="System Bold" size="24.0" />
-                    </font>
-                    <cursor>
-                        <Cursor fx:constant="SW_RESIZE" />
-                    </cursor>
-                </Text>
-            </children>
-         </Pane>
-          <Pane layoutX="168.0" layoutY="4.0" maxHeight="-Infinity" maxWidth="-Infinity" prefHeight="500.0" prefWidth="533.0" style="-fx-background-color: white;" stylesheets="@../styles/login.css">
-              <children>
-                  <TextField fx:id="phoneLoginField" layoutX="145.0" layoutY="114.0" prefHeight="30.0" prefWidth="274.0" promptText="Phone number">
-                      <font>
-                          <Font name="Segoe UI" size="13.0" />
-                      </font>
-                  </TextField>
-                  <PasswordField fx:id="passwordLoginField" layoutX="145.0" layoutY="175.0" prefHeight="30.0" prefWidth="274.0" promptText="Password">
-                      <font>
-                          <Font size="13.0" />
-                      </font>
-                  </PasswordField>
-                  <Button fx:id="signingButton" layoutX="241.0" layoutY="227.0" mnemonicParsing="false" prefHeight="16.0" prefWidth="178.0" text="Sign In">
-                      <font>
-                          <Font name="Segoe UI Italic" size="12.0" />
-                      </font>
-                  </Button>
-                  <Label fx:id="registerLabel" layoutX="292.0" layoutY="293.0" prefHeight="36.0" prefWidth="61.0" styleClass="login_register_label" text="Register!">
-                      <font>
-                          <Font name="Verdana" size="13.0" />
-                      </font>
-                  </Label>
-                  <Label layoutX="266.0" layoutY="277.0" text="Not already a user?">
-                      <font>
-                          <Font name="Verdana" size="13.0" />
-                      </font>
-                  </Label>
-              </children>
-          </Pane>
-      </children>
-   </StackPane>
-    <VBox alignment="CENTER" prefHeight="500.0" prefWidth="230.0" styleClass="login_logo_container" stylesheets="@../styles/Register.css" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="0.0">
-        <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="login_logo_container" text="ChatApp!">
-            <font>
-                <Font name="Verdana Bold Italic" size="25.0" />
-            </font></Text>
-    </VBox>
-
-</AnchorPane>
Index: client/target/classes/styles/Register.css
===================================================================
diff --git a/client/target/classes/styles/Register.css b/client/target/classes/styles/Register.css
deleted file mode 100644
--- a/client/target/classes/styles/Register.css	
+++ /dev/null	
@@ -1,117 +0,0 @@
-/* Add these styles to your existing CSS */
-
-/* Styles for Labels */
-.label {
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 14px;
-    -fx-font-weight: bold;
-    -fx-text-fill: #4d2890; /* Use the specified color */
-}
-.login_container {
-    -fx-background-color: linear-gradient(to bottom, #A0A0A0, #707070);
-}
-
-
-.login_logo_container {
-    -fx-background-color: linear-gradient(to bottom, #6E00FF, #9C00FF);
-    -fx-alignment: center;
-}
-
-
-.login_logo_container Text{
-    -fx-font-size: 2em;
-    -fx-fill: #FFFFFF;
-
-}
-
-.login_logo_container FontAwsomeIconView{
-    -fx-fill: #ecf39e;
-}
-
-.login_form_container{
-    -fx-spacing:15;
-    -fx-alignment: top_left;
-}
-
-.login_form_container Label{
-    -fx-text-fill: #727272;
-    -fx-font-family: Work Sans;
-    -fx-font-size: 20px;
-    -fx-font-style: normal;
-    -fx-line-height: normal;
-    -fx-letter-spacing: -0.5px;
-}
-
-.input_field{
-    -fx-fill: white;
-    -fx-pref-height: 35;
-    -fx-font-size: 1.2em;
-}
-
-.login_form_container Button:hover{
-    -fx-cursor:hand;
-}
-
-.login_register_label:hover{
-    -fx-cursor:hand;
-}
-
-#signing_button {
-    -fx-background-color: linear-gradient(to bottom, #6E00FF, #9C00FF);
-    -fx-text-fill: white;
-    -fx-font-size: 14px;
-    -fx-padding: 8 16;
-    -fx-border-radius: 5;
-}
-/* Styles for TextFields and PasswordFields */
-.text-field, .password-field {
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 14px;
-    -fx-prompt-text-fill: #808080; /* Placeholder text color */
-}
-
-/* Styles for DatePicker */
-.date-picker {
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 14px;
-    -fx-prompt-text-fill: #808080; /* Placeholder text color */
-}
-
-/* Styles for RadioButton */
-.radio-button {
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 14px;
-    -fx-text-fill: #4d2890; /* Use the specified color */
-}
-
-/* Styles for ComboBox */
-.combo-box {
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 14px;
-    -fx-prompt-text-fill: #808080; /* Placeholder text color */
-    -fx-background-color: #fff; /* ComboBox background color */
-    -fx-border-color: #ccc; /* ComboBox border color */
-}
-
-.ezzo {
-    -fx-background-color: linear-gradient(to right, #455EB5 9.16%, #5643CC 43.89%, #673FD7 64.72%);
-    -fx-border-radius: 8px;
-    -fx-border-style: none;
-    -fx-box-sizing: border-box;
-    -fx-text-fill: #FFFFFF;
-    -fx-cursor: hand;
-    -fx-font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
-    -fx-font-size: 16px;
-    -fx-font-weight: 500;
-
-    -fx-text-align: center;
-    -fx-text-shadow: rgba(0, 0, 0, 0.25) 0 3px 8px;
-    -fx-transition: all 0.5s;
-    -fx-user-select: none;
-    -fx-touch-action: manipulation;
-}
-
-.ezzo:hover {
-    -fx-box-shadow: rgba(80, 63, 205, 0.5) 0 1px 30px;
-    -fx-transition-duration: 0.1s;
-}
\ No newline at end of file
Index: client/target/classes/styles/login.css
===================================================================
diff --git a/client/target/classes/styles/login.css b/client/target/classes/styles/login.css
deleted file mode 100644
--- a/client/target/classes/styles/login.css	
+++ /dev/null	
@@ -1,56 +0,0 @@
-.login_container {
-    -fx-background-color: linear-gradient(to bottom, #A0A0A0, #707070);
-}
-
-
-.login_logo_container {
-    -fx-background-color: linear-gradient(to bottom, #6E00FF, #9C00FF);
-    -fx-alignment: center;
-}
-
-
-.login_logo_container Text{
-    -fx-font-size: 2em;
-    -fx-fill: #FFFFFF;
-
-}
-
-.login_logo_container FontAwsomeIconView{
-    -fx-fill: #ecf39e;
-}
-
-.login_form_container{
-    -fx-spacing:15;
-    -fx-alignment: top_left;
-}
-
-.login_form_container Label{
-    -fx-text-fill: #727272;
-    -fx-font-family: Work Sans;
-    -fx-font-size: 20px;
-    -fx-font-style: normal;
-    -fx-line-height: normal;
-    -fx-letter-spacing: -0.5px;
-}
-
-.input_field{
-    -fx-fill: white;
-    -fx-pref-height: 35;
-    -fx-font-size: 1.2em;
-}
-
-.login_form_container Button:hover{
-    -fx-cursor:hand;
-}
-
-.login_register_label:hover{
-    -fx-cursor:hand;
-}
-
-#signing_button {
-    -fx-background-color: linear-gradient(to bottom, #6E00FF, #9C00FF);
-    -fx-text-fill: white;
-    -fx-font-size: 14px;
-    -fx-padding: 8 16;
-    -fx-border-radius: 5;
-}
\ No newline at end of file
Index: client/target/classes/fxml/Register.fxml
===================================================================
diff --git a/client/target/classes/fxml/Register.fxml b/client/target/classes/fxml/Register.fxml
deleted file mode 100644
--- a/client/target/classes/fxml/Register.fxml	
+++ /dev/null	
@@ -1,280 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import java.lang.String?>
-<?import javafx.collections.FXCollections?>
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.Cursor?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.ComboBox?>
-<?import javafx.scene.control.DatePicker?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.PasswordField?>
-<?import javafx.scene.control.RadioButton?>
-<?import javafx.scene.control.TextField?>
-<?import javafx.scene.layout.BorderPane?>
-<?import javafx.scene.layout.ColumnConstraints?>
-<?import javafx.scene.layout.GridPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.RowConstraints?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Font?>
-<?import javafx.scene.text.Text?>
-
-<BorderPane prefHeight="664.0" prefWidth="656.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.RegisterController">
-   <center>
-      <VBox alignment="CENTER_LEFT" BorderPane.alignment="CENTER_LEFT">
-         <children>
-            <HBox alignment="CENTER">
-               <children>
-                   <Text fill="#4d2890" nodeOrientation="LEFT_TO_RIGHT" smooth="false" stroke="BLACK" strokeType="OUTSIDE" strokeWidth="0.0" text="ChatApp Registration" textAlignment="CENTER">
-                       <font>
-                           <Font name="System Bold" size="24.0" />
-                       </font>
-                       <cursor>
-                           <Cursor fx:constant="SW_RESIZE" />
-                       </cursor>
-                   </Text>
-               </children>
-               <VBox.margin>
-                  <Insets bottom="20.0" top="30.0" />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="158.7999755859375" minWidth="10.0" prefWidth="134.7999755859375" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="319.6000045776367" minWidth="10.0" prefWidth="298.8000244140625" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                   <Label text="Full Name" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <TextField fx:id="nameField" prefHeight="26.0" prefWidth="300.0" GridPane.columnIndex="1">
-                           <styleClass>
-                              <String fx:value="text-field" />
-                              <String fx:value="radio-button" />
-                           </styleClass>
-                           <GridPane.margin>
-                              <Insets right="20.0" />
-                           </GridPane.margin>
-                        </TextField>
-                     </children>
-                  </GridPane>
-               </children>
-               <VBox.margin>
-                  <Insets />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="161.20001220703125" minWidth="10.0" prefWidth="137.6" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="302.79997558593743" minWidth="10.0" prefWidth="297.19999999999993" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label stylesheets="@../styles/Register.css" text="Phone Number" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font></Label>
-                          <TextField fx:id="phoneNumberField" prefHeight="26.0" prefWidth="300.0" GridPane.columnIndex="1">
-                           <GridPane.margin>
-                              <Insets right="20.0" />
-                           </GridPane.margin></TextField>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="325.6" minWidth="10.0" prefWidth="136.40003662109376" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="297.59996337890624" minWidth="0.0" prefWidth="297.59996337890624" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label text="Email" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <TextField fx:id="emailField" GridPane.columnIndex="1">
-                           <GridPane.margin>
-                              <Insets right="20.0" />
-                           </GridPane.margin></TextField>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="195.9999801635742" minWidth="10.0" prefWidth="138.59998779296876" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="295.20001220703125" minWidth="10.0" prefWidth="295.20001220703125" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label text="Password" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <PasswordField fx:id="passwordField" GridPane.columnIndex="1">
-                           <GridPane.margin>
-                              <Insets right="20.0" />
-                           </GridPane.margin></PasswordField>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="287.4" minWidth="10.0" prefWidth="141.5999755859375" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="299.9999755859375" minWidth="0.0" prefWidth="292.8000244140625" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                      <Label text="Confirm Password" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <PasswordField fx:id="confirmPasswordField" prefHeight="26.0" prefWidth="252.0" GridPane.columnIndex="1">
-                           <GridPane.margin>
-                              <Insets right="20.0" />
-                           </GridPane.margin>
-                        </PasswordField>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="260.79999999999995" minWidth="10.0" prefWidth="145.6000244140625" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="298.40000000000003" minWidth="0.0" prefWidth="287.99997558593753" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label text="Date of Birth" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <DatePicker fx:id="dateOfBirthPicker" prefHeight="26.0" prefWidth="260.0" GridPane.columnIndex="1" />
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="429.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="278.4" minWidth="10.0" prefWidth="106.2000244140625" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="315.60003662109375" minWidth="0.0" prefWidth="255.7999755859375" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label text="Gender" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                          <HBox alignment="CENTER" prefHeight="68.0" prefWidth="281.0" spacing="10" GridPane.columnIndex="1">
-                              <RadioButton fx:id="maleRadioButton" text="Male" textFill="#4d2890" />
-                              <RadioButton text="Female" textFill="#4d2890" />
-                          </HBox>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
-               <children>
-                  <GridPane prefHeight="72.0" prefWidth="430.0">
-                     <columnConstraints>
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="251.2" minWidth="10.0" prefWidth="125.59999237060546" />
-                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="310.400048828125" minWidth="0.0" prefWidth="305.60000762939455" />
-                     </columnConstraints>
-                     <rowConstraints>
-                        <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
-                     </rowConstraints>
-                     <children>
-                  
-                                <Label prefHeight="14.0" prefWidth="194.0" text="Country" textFill="#4d2890">
-                           <font>
-                              <Font name="System Bold" size="14.0" />
-                           </font>
-                        </Label>
-                  
-                                <ComboBox fx:id="countryComboBox" prefHeight="26.0" prefWidth="258.0" promptText="Select Country" GridPane.columnIndex="1" GridPane.halignment="CENTER">
-                              <items>
-                                  <FXCollections fx:factory="observableArrayList">
-                                      <String fx:value="United States" />
-                                      <String fx:value="United Kingdom" />
-                                      <String fx:value="Canada" />
-                  
-                                        </FXCollections>
-                              </items>
-                          </ComboBox>
-                     </children>
-                  </GridPane>
-               </children>
-            </HBox>
-            <HBox alignment="CENTER">
-               <children>
-                  <Button fx:id="registerButton" alignment="CENTER" mnemonicParsing="false" prefHeight="28.0" prefWidth="135.0" styleClass="ezzo" stylesheets="@../styles/Register.css" text="Register">
-                     <HBox.margin>
-                        <Insets bottom="20.0" left="30.0" top="30.0" />
-                     </HBox.margin>
-                  </Button>
-               </children>
-            </HBox>
-         </children>
-         <BorderPane.margin>
-            <Insets left="20.0" />
-         </BorderPane.margin>
-      </VBox>
-   </center>
-   <left>
-      <VBox fx:id="leftVBox" alignment="CENTER" prefHeight="502.0" prefWidth="221.0" style="-fx-background-color: linear-gradient(to bottom, #6E00FF, #9C00FF);;" BorderPane.alignment="CENTER">
-         <children>
-            <Label text="ChatApp!">
-               <font>
-                  <Font name="Verdana Bold Italic" size="24.0" />
-               </font>
-            </Label>
-         </children>
-      </VBox>
-   </left>
-</BorderPane>
Index: client/target/classes/fxml/Auth.fxml
===================================================================
diff --git a/client/target/classes/fxml/Auth.fxml b/client/target/classes/fxml/Auth.fxml
deleted file mode 100644
--- a/client/target/classes/fxml/Auth.fxml	
+++ /dev/null	
@@ -1,133 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import java.lang.*?>
-<?import javafx.collections.*?>
-<?import javafx.geometry.*?>
-<?import javafx.scene.*?>
-<?import javafx.scene.control.*?>
-<?import javafx.scene.layout.*?>
-<?import javafx.scene.text.*?>
-
-<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" prefHeight="500.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.AuthController">
-   <StackPane layoutX="200.0" prefHeight="500.0" prefWidth="600.0">
-      <children>
-         <Pane fx:id="loginPage" prefHeight="500.0" prefWidth="569.0" style="-fx-background-color: white;">
-            <children>
-
-                <GridPane alignment="CENTER" hgap="20" layoutX="78.0" layoutY="43.0" prefHeight="400.0" prefWidth="400.0" stylesheets="@../styles/Register.css" vgap="20">
-                    <padding>
-                        <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
-                    </padding>
-
-                    <columnConstraints>
-                        <ColumnConstraints maxWidth="150.0" minWidth="114.0" prefWidth="146.0" />
-                        <ColumnConstraints maxWidth="205.0" minWidth="169.0" prefWidth="173.0" />
-                    </columnConstraints>
-
-                    <Label text="Full Name" textFill="#4d2890" />
-                    <TextField fx:id="nameField" GridPane.columnIndex="1">
-                     <styleClass>
-                        <String fx:value="text-field" />
-                        <String fx:value="radio-button" />
-                     </styleClass>
-                  </TextField>
-
-                    <Label stylesheets="@../styles/Register.css" text="Phone Number" textFill="#4d2890" GridPane.rowIndex="1" />
-                    <TextField fx:id="phoneNumberField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
-
-                    <Label text="Email" textFill="#4d2890" GridPane.rowIndex="2" />
-                    <TextField fx:id="emailField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
-
-                    <Label text="Password" textFill="#4d2890" GridPane.rowIndex="3" />
-                    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
-
-                    <Label text="Confirm Password" textFill="#4d2890" GridPane.rowIndex="4" />
-                    <PasswordField fx:id="confirmPasswordField" GridPane.columnIndex="1" GridPane.rowIndex="4" />
-
-                    <Label text="Date of Birth" textFill="#4d2890" GridPane.rowIndex="5" />
-                    <DatePicker fx:id="dateOfBirthPicker" GridPane.columnIndex="1" GridPane.rowIndex="5" />
-
-                    <Label text="Gender" textFill="#4d2890" GridPane.rowIndex="6" />
-                    <HBox spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="6">
-                        <RadioButton fx:id="maleRadioButton" text="Male" textFill="#4d2890" />
-                        <RadioButton text="Female" textFill="#4d2890" />
-                    </HBox>
-
-                    <Label text="Country" textFill="#4d2890" GridPane.rowIndex="7" />
-
-                    <ComboBox fx:id="countryComboBox" prefHeight="24.0" prefWidth="198.0" promptText="Select Country" GridPane.columnIndex="1" GridPane.rowIndex="7">
-                        <items>
-                            <FXCollections fx:factory="observableArrayList">
-                                <String fx:value="United States" />
-                                <String fx:value="United Kingdom" />
-                                <String fx:value="Canada" />
-
-                            </FXCollections>
-                        </items>
-                    </ComboBox>
-
-                  <styleClass>
-                     <String fx:value="text-field" />
-                     <String fx:value="label" />
-                  </styleClass>
-                  <rowConstraints>
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                     <RowConstraints />
-                  </rowConstraints>
-                </GridPane>
-               <Button fx:id="registerButton" layoutX="204.0" layoutY="436.0" mnemonicParsing="false" prefHeight="28.0" prefWidth="135.0" styleClass="ezzo" stylesheets="@../styles/Register.css" text="Register" />
-                <Text fill="#4d2890" layoutX="188.0" layoutY="52.0" nodeOrientation="LEFT_TO_RIGHT" smooth="false" stroke="BLACK" strokeType="OUTSIDE" strokeWidth="0.0" text="Registration" textAlignment="CENTER">
-                    <font>
-                        <Font name="System Bold" size="24.0" />
-                    </font>
-                    <cursor>
-                        <Cursor fx:constant="SW_RESIZE" />
-                    </cursor>
-                </Text>
-            </children>
-         </Pane>
-          <Pane layoutX="168.0" layoutY="4.0" maxHeight="-Infinity" maxWidth="-Infinity" prefHeight="500.0" prefWidth="533.0" style="-fx-background-color: white;" stylesheets="@../styles/login.css">
-              <children>
-                  <TextField fx:id="phoneLoginField" layoutX="145.0" layoutY="114.0" prefHeight="30.0" prefWidth="274.0" promptText="Phone number">
-                      <font>
-                          <Font name="Segoe UI" size="13.0" />
-                      </font>
-                  </TextField>
-                  <PasswordField fx:id="passwordLoginField" layoutX="145.0" layoutY="175.0" prefHeight="30.0" prefWidth="274.0" promptText="Password">
-                      <font>
-                          <Font size="13.0" />
-                      </font>
-                  </PasswordField>
-                  <Button fx:id="signingButton" layoutX="241.0" layoutY="227.0" mnemonicParsing="false" prefHeight="16.0" prefWidth="178.0" text="Sign In">
-                      <font>
-                          <Font name="Segoe UI Italic" size="12.0" />
-                      </font>
-                  </Button>
-                  <Label fx:id="registerLabel" layoutX="292.0" layoutY="293.0" prefHeight="36.0" prefWidth="61.0" styleClass="login_register_label" text="Register!">
-                      <font>
-                          <Font name="Verdana" size="13.0" />
-                      </font>
-                  </Label>
-                  <Label layoutX="266.0" layoutY="277.0" text="Not already a user?">
-                      <font>
-                          <Font name="Verdana" size="13.0" />
-                      </font>
-                  </Label>
-              </children>
-          </Pane>
-      </children>
-   </StackPane>
-    <VBox alignment="CENTER" prefHeight="500.0" prefWidth="230.0" styleClass="login_logo_container" stylesheets="@../styles/Register.css" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="0.0">
-        <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="login_logo_container" text="ChatApp!">
-            <font>
-                <Font name="Verdana Bold Italic" size="25.0" />
-            </font></Text>
-    </VBox>
-
-</AnchorPane>
Index: server/src/main/java/org/Server/Service/Factories/UserServiceFactory.java
===================================================================
diff --git a/server/src/main/java/org/Server/Service/Factories/UserServiceFactory.java b/server/src/main/java/org/Server/Service/Factories/UserServiceFactory.java
deleted file mode 100644
--- a/server/src/main/java/org/Server/Service/Factories/UserServiceFactory.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package org.Server.Service.Factories;
-
-import Interfaces.UserServiceFactoryI;
-import org.Server.Service.User.LoginService;
-import org.Server.Service.User.RegistrationService;
-import org.Server.Service.User.UserService;
-import java.io.Serializable;
-import java.rmi.RemoteException;
-
-public class UserServiceFactory implements Serializable, UserServiceFactoryI {
-
-    private final UserService userServiceInstance;
-    public UserServiceFactory(UserService userService){
-        userServiceInstance = userService;
-    }
-    public  RegistrationService getRegistrationService() throws RemoteException {
-        return new RegistrationService(userServiceInstance);
-    }
-    public  LoginService getLoginService() throws RemoteException {
-        return new LoginService(userServiceInstance);
-    }
-}
Index: client/src/main/java/org/Client/Controllers/AuthController.java
===================================================================
diff --git a/client/src/main/java/org/Client/Controllers/AuthController.java b/client/src/main/java/org/Client/Controllers/AuthController.java
deleted file mode 100644
--- a/client/src/main/java/org/Client/Controllers/AuthController.java	
+++ /dev/null	
@@ -1,169 +0,0 @@
-// AuthController.java
-package org.Client.Controllers;
-
-import Model.DTO.UserLoginDTO;
-import Model.DTO.UserRegistrationDTO;
-import javafx.fxml.FXML;
-import javafx.fxml.Initializable;
-import javafx.scene.control.*;
-import javafx.scene.layout.Pane;
-import java.net.URL;
-import java.rmi.RemoteException;
-import java.sql.Date;
-import java.sql.SQLException;
-import java.time.LocalDate;
-import java.util.ResourceBundle;
-
-public class AuthController implements Initializable {
-    @FXML
-    public Label registerLabel;
-    @FXML
-    public Button signingButton;
-    @FXML
-    public PasswordField passwordLoginField;
-    @FXML
-    public TextField phoneLoginField;
-    @FXML
-    public Pane loginPage;
-    @FXML
-    public TextField nameField;
-    @FXML
-    public TextField phoneNumberField;
-    @FXML
-    public TextField emailField;
-    @FXML
-    public PasswordField passwordField;
-    @FXML
-    public PasswordField confirmPasswordField;
-    @FXML
-    public DatePicker dateOfBirthPicker;
-    @FXML
-    public RadioButton maleRadioButton;
-    @FXML
-    public ComboBox<String> countryComboBox;
-    @FXML
-    public Button registerButton;
-
-    private RemoteServiceHandler remoteServiceHandler;
-
-    @Override
-    public void initialize(URL url, ResourceBundle resourceBundle) {
-        remoteServiceHandler = RemoteServiceHandler.getInstance();
-        signingButton.setOnAction((e) -> handleSignIn());
-        registerButton.setOnAction((e) -> handleRegistration());
-        registerLabel.setOnMouseClicked(e -> loginPage.toFront());
-    }
-
-    private void handleSignIn() {
-        try {
-            validateUserInputLogin();
-
-            String phoneNumber = phoneLoginField.getText();
-            String password = passwordLoginField.getText();
-            UserLoginDTO userLogin = new UserLoginDTO(phoneNumber, password);
-
-            int loginResult = remoteServiceHandler.getRemoteLoginService().loginUser(userLogin);
-            handleLoginResult(loginResult);
-
-        }catch (IllegalArgumentException e) {
-            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
-        } catch (RemoteException e) {
-            handleException("Error during login", e);
-        } finally {
-            clearLoginFields();
-        }
-    }
-
-    private void handleRegistration() {
-        try {
-            validateUserInput();
-
-            String phoneNumber = phoneNumberField.getText();
-            String name = nameField.getText();
-            String email = emailField.getText();
-            String password = passwordField.getText();
-            Date dateOfBirth = Date.valueOf(dateOfBirthPicker.getValue());
-            String gender = maleRadioButton.isSelected() ? "Male" : "Female";
-            String country = countryComboBox.getValue();
-
-            UserRegistrationDTO userRegistrationDTO = new UserRegistrationDTO(
-                    phoneNumber, name, email, password, gender, country, dateOfBirth
-            );
-
-            int registrationResult = remoteServiceHandler.getRegistrationService().registerUser(userRegistrationDTO);
-            handleRegistrationResult(registrationResult);
-
-        } catch (IllegalArgumentException e) {
-            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
-        } catch (RemoteException | SQLException e) {
-            handleException("Error during registration", e);
-        } finally {
-            clearRegistrationFields();
-        }
-    }
-
-    private void handleLoginResult(int loginResult) {
-        if (loginResult == 0) {
-            remoteServiceHandler.showAlert("Login Successful", Alert.AlertType.INFORMATION);
-        } else if (loginResult == 1) {
-            remoteServiceHandler.showAlert("Invalid Phone Number or Password", Alert.AlertType.WARNING);
-        } else {
-            remoteServiceHandler.showAlert("User Services Failed", Alert.AlertType.ERROR);
-        }
-    }
-
-    private void handleRegistrationResult(int registrationResult) {
-        if (registrationResult == 0) {
-            remoteServiceHandler.showAlert("User is Already Existed", Alert.AlertType.INFORMATION);
-        } else if (registrationResult == 1) {
-            remoteServiceHandler.showAlert("Sign Up Successfully", Alert.AlertType.INFORMATION);
-        }
-    }
-
-    private void handleException(String message, Exception exception) {
-        remoteServiceHandler.showAlert(message + ": " + exception.getMessage(), Alert.AlertType.ERROR);
-    }
-
-    private void validateUserInput() {
-        if (nameField.getText().isEmpty() || phoneNumberField.getText().isEmpty() ||
-                emailField.getText().isEmpty() || passwordField.getText().isEmpty() ||
-                confirmPasswordField.getText().isEmpty() || dateOfBirthPicker.getValue() == null ||
-                countryComboBox.getValue() == null || (maleRadioButton.isSelected() && countryComboBox.getValue().isEmpty())) {
-            throw new IllegalArgumentException("Please fill in all fields");
-        }
-        if (!passwordField.getText().equals(confirmPasswordField.getText())) {
-            throw new IllegalArgumentException("Password and Confirm Password do not match");
-        }
-        if (!isPhoneNumberValid(phoneNumberField.getText())) {
-            throw new IllegalArgumentException("Please enter a valid phone number");
-        }
-        if (dateOfBirthPicker.getValue().isAfter(Date.valueOf(LocalDate.now()).toLocalDate())) {
-            throw new IllegalArgumentException("Date of birth must be in the past");
-        }
-    }
-    private void validateUserInputLogin() {
-        if (phoneLoginField.getText().isEmpty() || passwordLoginField.getText().isEmpty()) {
-            throw new IllegalArgumentException("Please enter both phone number and password");
-        }
-        if (!isPhoneNumberValid(phoneLoginField.getText())) {
-            throw new IllegalArgumentException("Please enter a valid phone number");
-        }
-    }
-    private boolean isPhoneNumberValid(String phoneNumber) {
-        return phoneNumber.matches("[0-9]+");
-    }
-
-    private void clearLoginFields() {
-        phoneLoginField.clear();
-        passwordLoginField.clear();
-    }
-
-    private void clearRegistrationFields() {
-        nameField.clear();
-        phoneNumberField.clear();
-        emailField.clear();
-        passwordField.clear();
-        confirmPasswordField.clear();
-        dateOfBirthPicker.setValue(null);
-    }
-}
Index: shared/src/main/java/Interfaces/UserServiceFactoryI.java
===================================================================
diff --git a/shared/src/main/java/Interfaces/UserServiceFactoryI.java b/shared/src/main/java/Interfaces/UserServiceFactoryI.java
deleted file mode 100644
--- a/shared/src/main/java/Interfaces/UserServiceFactoryI.java	
+++ /dev/null	
@@ -1,8 +0,0 @@
-package Interfaces;
-
-import java.rmi.RemoteException;
-
-public interface UserServiceFactoryI {
-    RemoteRegistrationService getRegistrationService() throws RemoteException;
-    RemoteLoginService getLoginService() throws RemoteException;
-}
Index: client/target/classes/fxml/Login.fxml
===================================================================
diff --git a/client/target/classes/fxml/Login.fxml b/client/target/classes/fxml/Login.fxml
deleted file mode 100644
--- a/client/target/classes/fxml/Login.fxml	
+++ /dev/null	
@@ -1,96 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.PasswordField?>
-<?import javafx.scene.control.TextField?>
-<?import javafx.scene.layout.BorderPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Font?>
-<?import javafx.scene.text.Text?>
-
-<BorderPane prefHeight="307.0" prefWidth="574.0" stylesheets="@../styles/login.css" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.LoginController">
-   <left>
-       <VBox alignment="CENTER" prefHeight="182.0" prefWidth="198.0" styleClass="login_logo_container" BorderPane.alignment="CENTER">
-           <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="login_logo_container" text="ChatApp!">
-               <font>
-                   <Font name="Verdana Bold Italic" size="25.0" />
-               </font>
-         </Text>
-       </VBox>
-   </left>
-   <center>
-      <VBox alignment="CENTER" prefHeight="318.0" prefWidth="413.0" BorderPane.alignment="CENTER">
-         <children>
-            <HBox alignment="CENTER">
-               <children>
-                     <TextField fx:id="phoneField" prefHeight="30.0" prefWidth="390.0" promptText="Phone number">
-                         <font>
-                             <Font name="Segoe UI" size="13.0" />
-                         </font>
-                     </TextField>
-               </children>
-               <opaqueInsets>
-                  <Insets />
-               </opaqueInsets>
-               <VBox.margin>
-                  <Insets left="20.0" right="20.0" top="20.0" />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER">
-               <children>
-                     <PasswordField fx:id="passwordField" prefHeight="30.0" prefWidth="390.0" promptText="Password">
-                         <font>
-                             <Font size="13.0" />
-                         </font>
-                     </PasswordField>
-               </children>
-               <VBox.margin>
-                  <Insets left="20.0" right="20.0" top="10.0" />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER">
-               <children>
-                     <Button fx:id="signingButton" mnemonicParsing="false" prefHeight="16.0" prefWidth="178.0" text="Sign In">
-                         <font>
-                             <Font name="Segoe UI Italic" size="12.0" />
-                         </font>
-                     </Button>
-               </children>
-               <VBox.margin>
-                  <Insets right="20.0" top="20.0" />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER" prefHeight="20.0" prefWidth="274.0">
-               <children>
-                     <Label text="Not already a user?">
-                         <font>
-                             <Font name="Verdana" size="13.0" />
-                         </font>
-                     </Label>
-               </children>
-               <VBox.margin>
-                  <Insets right="20.0" top="40.0" />
-               </VBox.margin>
-            </HBox>
-            <HBox alignment="CENTER">
-               <children>
-                     <Label fx:id="registerLabel" prefHeight="36.0" prefWidth="61.0" styleClass="login_register_label" text="Register!">
-                         <font>
-                             <Font name="Verdana" size="13.0" />
-                         </font>
-                     </Label>
-               </children>
-               <VBox.margin>
-                  <Insets right="20.0" />
-               </VBox.margin>
-            </HBox>
-         </children>
-         <opaqueInsets>
-            <Insets />
-         </opaqueInsets>
-      </VBox>
-   </center>
-</BorderPane>
Index: client/src/main/resources/fxml/Register.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/resources/fxml/Register.fxml b/client/src/main/resources/ClientFxml/Register.fxml
rename from client/src/main/resources/fxml/Register.fxml
rename to client/src/main/resources/ClientFxml/Register.fxml
--- a/client/src/main/resources/fxml/Register.fxml	
+++ b/client/src/main/resources/ClientFxml/Register.fxml	
@@ -84,7 +84,7 @@
                      </rowConstraints>
                      <children>
                   
-                                <Label stylesheets="@../styles/Register.css" text="Phone Number" textFill="#4d2890">
+                                <Label stylesheets="@../ClientStyles/Register.css" text="Phone Number" textFill="#4d2890">
                            <font>
                               <Font name="System Bold" size="14.0" />
                            </font></Label>
@@ -253,7 +253,7 @@
             </HBox>
             <HBox alignment="CENTER">
                <children>
-                  <Button fx:id="registerButton" alignment="CENTER" mnemonicParsing="false" prefHeight="28.0" prefWidth="135.0" styleClass="ezzo" stylesheets="@../styles/Register.css" text="Register">
+                  <Button fx:id="registerButton" alignment="CENTER" mnemonicParsing="false" prefHeight="28.0" prefWidth="135.0" styleClass="ezzo" stylesheets="@../ClientStyles/Register.css" text="Register">
                      <HBox.margin>
                         <Insets bottom="20.0" left="30.0" top="30.0" />
                      </HBox.margin>
Index: client/src/main/resources/fxml/Login.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/resources/fxml/Login.fxml b/client/src/main/resources/ClientFxml/Login.fxml
rename from client/src/main/resources/fxml/Login.fxml
rename to client/src/main/resources/ClientFxml/Login.fxml
--- a/client/src/main/resources/fxml/Login.fxml	
+++ b/client/src/main/resources/ClientFxml/Login.fxml	
@@ -11,7 +11,7 @@
 <?import javafx.scene.text.Font?>
 <?import javafx.scene.text.Text?>
 
-<BorderPane prefHeight="307.0" prefWidth="574.0" stylesheets="@../styles/login.css" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.LoginController">
+<BorderPane prefHeight="307.0" prefWidth="574.0" stylesheets="@../ClientStyles/login.css" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.Client.Controllers.LoginController">
    <left>
        <VBox alignment="CENTER" prefHeight="182.0" prefWidth="198.0" styleClass="login_logo_container" BorderPane.alignment="CENTER">
            <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="login_logo_container" text="ChatApp!">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"cec0fd1a-f2d0-4f37-8f2f-5bbe38b86a9d\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/java/org/Server/GUI/Controllers/ServerManager.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/resources/fxml/ServerGUI.fxml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/resources/styles/ServerGUI.css\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/.gitignore\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/compiler.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/encodings.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/sqldialects.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/uiDesigner.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/vcs.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/main/java/org/Client/Views/ViewFactory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/main/java/org/Client/Views/ViewFactory.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/target/classes/org/Client/Views/ViewFactory.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/target/classes/org/Client/Views/ViewFactory.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/src/main/java/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/main/java/module-info.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/src/main/java/org/Server/App.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/main/java/org/Server/App.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ContactsRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ContactsRepository.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/target/classes/module-info.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/target/classes/module-info.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/target/classes/org/Server/App.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/target/classes/org/Server/App.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n        <option value=\"FxmlFile\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2bBrXtDZWmlI2Z9e0p1l5hxwu9m\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.App.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"C:/Users/LENOVO/IdeaProjects/Chat-Application-/server/src/main/resources\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\LENOVO\\IdeaProjects\\Chat-Application-\\server\\src\\main\\resources\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"App\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.Server.App\" />\n      <module name=\"server\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"org.Server.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"client\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"client\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.App\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-f644763e9732-f98dd351\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"cec0fd1a-f2d0-4f37-8f2f-5bbe38b86a9d\" name=\"Changes\" comment=\"\" />\n      <created>1705699356125</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1705699356125</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,27 +4,121 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="cec0fd1a-f2d0-4f37-8f2f-5bbe38b86a9d" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/GUI/Controllers/ServerManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/server/src/main/resources/fxml/ServerGUI.fxml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/server/src/main/resources/styles/ServerGUI.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/encodings.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/jarRepositories.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sqldialects.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/uiDesigner.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" />
+    <list default="true" id="ccc4e441-670c-4e8f-afc7-c4835cda8edf" name="Changes" comment="handled comments">
+      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/RepoInterfaces/UserRepoInterface.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Factories/ServicesFactory.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/shared/src/main/java/Exceptions/CustomException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/shared/src/main/java/Interfaces/RemoteUserService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/client/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/org/Client/ClientApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/AuthController.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/LoginController.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/LoginController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/RegisterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/RegisterController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/org/Client/Controllers/RemoteServiceHandler.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/src/main/java/org/Client/Views/ViewFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/org/Client/Views/ViewFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/Images/reg.jpeg" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/resources/ClientImages/reg.jpeg" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/fxml/Auth.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/fxml/Login.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/resources/ClientFxml/Login.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/fxml/Register.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/resources/ClientFxml/Register.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/styles/Register.css" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/resources/ClientStyles/Register.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/resources/styles/login.css" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/resources/ClientStyles/login.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/Images/reg.jpeg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/fxml/Auth.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/fxml/Login.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/fxml/Register.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/App.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/AuthController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/LoginController.class" beforeDir="false" afterPath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/LoginController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/RegisterController.class" beforeDir="false" afterPath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/RegisterController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/RemoteServiceHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/client/target/classes/org/Client/Controllers/RemoteServiceHandler.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/target/classes/org/Client/Views/ViewFactory.class" beforeDir="false" afterPath="$PROJECT_DIR$/client/target/classes/org/Client/Views/ViewFactory.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/styles/Register.css" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/target/classes/styles/login.css" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/module-info.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/App.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/GUI/Controllers/ServerManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/GUI/Controllers/ServerManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ChatRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ChatRepository.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ContactsRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/ContactsRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/MessageRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/MessageRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/UserNotificationRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/UserNotificationRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/UserRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Repository/UserRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Contacts/ContactService.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Contacts/ContactService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Contacts/InvitationService.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Contacts/InvitationService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Factories/ServiceFactory.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/Factories/UserServiceFactory.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/LoginService.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/LoginService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/RegistrationService.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/RegistrationService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/UserService.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/User/UserService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/UserSession.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/Service/UserSession.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/org/Server/TestApp.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/TestApp.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/resources/fxml/ServerGUI.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/resources/ServerFxml/ServerGUI.fxml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/target/classes/module-info.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/module-info.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/App.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/App.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/App.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/GUI/Controllers/ServerManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/GUI/Controllers/ServerManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/AttachmentReopsitory.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/AttachmentReopsitory.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ChatParticipantRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ChatParticipantRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ChatRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ChatRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ContactsRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/ContactsRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/MessageRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/MessageRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/UserNotificationRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/UserNotificationRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/UserRepository.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Repository/UserRepository.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Contacts/ContactService.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Contacts/ContactService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Contacts/InvitationService.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Contacts/InvitationService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Factories/ServiceFactory.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/Factories/UserServiceFactory.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/LoginService.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/LoginService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/RegistrationService.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/RegistrationService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/UserService.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/User/UserService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/Service/UserSession.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/Service/UserSession.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/target/classes/org/Server/TestApp.class" beforeDir="false" afterPath="$PROJECT_DIR$/server/target/classes/org/Server/TestApp.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Interfaces/RemoteLoginService.java" beforeDir="false" afterPath="$PROJECT_DIR$/shared/src/main/java/Interfaces/RemoteLoginService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Interfaces/RemoteRegistrationService.java" beforeDir="false" afterPath="$PROJECT_DIR$/shared/src/main/java/Interfaces/RemoteRegistrationService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Interfaces/Repository.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/RepoInterfaces/Repository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Interfaces/ServiceFactoryI.java" beforeDir="false" afterPath="$PROJECT_DIR$/shared/src/main/java/Interfaces/ServicesFactoryInterface.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Interfaces/UserServiceFactoryI.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/DTO/UserRegistrationDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/shared/src/main/java/Model/DTO/UserRegistrationDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Attachment.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Attachment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/BlockedContact.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/BlockedContact.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Chat.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Chat.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/ChatParticipants.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/ChatParticipants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Contact.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Contact.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Group.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Group.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/GroupMember.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/GroupMember.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Message.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Message.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/Notification.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/Notification.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/ServerAnnouncement.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/ServerAnnouncement.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Entities/UserNotification.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/ServerEntities/UserNotification.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Enums/StatusEnum.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/Enums/StatusEnum.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/Model/Enums/UserField.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/org/Server/ServerModels/Enums/UserField.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/shared/src/main/java/module-info.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Interfaces/RemoteLoginService.class" beforeDir="false" afterPath="$PROJECT_DIR$/shared/target/classes/Interfaces/RemoteLoginService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Interfaces/RemoteRegistrationService.class" beforeDir="false" afterPath="$PROJECT_DIR$/shared/target/classes/Interfaces/RemoteRegistrationService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Interfaces/Repository.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Interfaces/ServiceFactoryI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Interfaces/UserServiceFactoryI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/DTO/UserRegistrationDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/shared/target/classes/Model/DTO/UserRegistrationDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Attachment.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/BlockedContact.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Chat.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/ChatParticipants.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Contact.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Group.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/GroupMember.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Message.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/Notification.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/ServerAnnouncement.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/User.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Entities/UserNotification.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Enums/StatusEnum.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/Model/Enums/UserField.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/shared/target/classes/module-info.class" beforeDir="false" afterPath="$PROJECT_DIR$/shared/target/classes/module-info.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -35,7 +129,7 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Class" />
-        <option value="FxmlFile" />
+        <option value="Interface" />
       </list>
     </option>
   </component>
@@ -50,89 +144,97 @@
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
-  <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 0
-}</component>
-  <component name="ProjectId" id="2bBrXtDZWmlI2Z9e0p1l5hxwu9m" />
+  <component name="ProjectId" id="2bRNLNV4EVYFj9SRFTqHE3cvjGU" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
-    "Application.App.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/LENOVO/IdeaProjects/Chat-Application-/server/src/main/resources"
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "DEV",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
-  <component name="RecentsManager">
-    <key name="CopyFile.RECENT_KEYS">
-      <recent name="C:\Users\LENOVO\IdeaProjects\Chat-Application-\server\src\main\resources" />
-    </key>
-  </component>
-  <component name="RunManager">
-    <configuration name="App" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="org.Server.App" />
-      <module name="server" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="org.Server.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="JetRunConfigurationType">
-      <module name="client" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
-      <module name="client" />
-      <option name="filePath" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Application.App" />
-      </list>
-    </recent_temporary>
-  </component>
-  <component name="SharedIndexes">
-    <attachedChunks>
-      <set>
-        <option value="jdk-21.0.1-openjdk-21.0.1-f644763e9732-f98dd351" />
-      </set>
-    </attachedChunks>
-  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="cec0fd1a-f2d0-4f37-8f2f-5bbe38b86a9d" name="Changes" comment="" />
-      <created>1705699356125</created>
+      <changelist id="ccc4e441-670c-4e8f-afc7-c4835cda8edf" name="Changes" comment="" />
+      <created>1706173878175</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1705699356125</updated>
+      <updated>1706173878175</updated>
+      <workItem from="1706173879956" duration="3230000" />
+      <workItem from="1706184785725" duration="4509000" />
+      <workItem from="1706191617326" duration="1586000" />
+      <workItem from="1706195283541" duration="880000" />
+      <workItem from="1706253667182" duration="7460000" />
     </task>
+    <task id="LOCAL-00001" summary="Merge omar's client GUI with my services">
+      <option name="closed" value="true" />
+      <created>1706185214677</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1706185214677</updated>
+    </task>
+    <task id="LOCAL-00002" summary="handled errors">
+      <option name="closed" value="true" />
+      <created>1706186830214</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1706186830214</updated>
+    </task>
+    <task id="LOCAL-00003" summary="handled comments">
+      <option name="closed" value="true" />
+      <created>1706187178313</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1706187178313</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
     <option name="TAB_STATES">
       <map>
         <entry key="MAIN">
           <value>
-            <State />
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="DEV" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
           </value>
         </entry>
       </map>
     </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Merge omar's client GUI with my services" />
+    <MESSAGE value="handled errors" />
+    <MESSAGE value="handled comments" />
+    <option name="LAST_COMMIT_MESSAGE" value="handled comments" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100755
--- /dev/null	
+++ b/.idea/uiDesigner.xml	
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: shared/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module shared {\n    exports Interfaces;\n    exports Model.Entities;\n    exports Model.Enums;\n    exports Model.DTO;\n\n    requires java.rmi;\n    requires java.sql;\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/module-info.java b/shared/src/main/java/module-info.java
--- a/shared/src/main/java/module-info.java	
+++ b/shared/src/main/java/module-info.java	
@@ -1,8 +1,7 @@
 module shared {
     exports Interfaces;
-    exports Model.Entities;
-    exports Model.Enums;
     exports Model.DTO;
+    exports Exceptions;
 
     requires java.rmi;
     requires java.sql;
Index: server/src/main/java/org/Server/TestApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server;\nimport Model.Entities.User;\nimport org.Server.Repository.ContactsRepository;\nimport org.Server.Repository.DatabaseConnectionManager;\nimport org.Server.Repository.UserNotificationRepository;\nimport org.Server.Repository.UserRepository;\nimport org.Server.Service.Contacts.ContactService;\nimport org.Server.Service.Contacts.InvitationService;\nimport org.Server.Service.User.UserService;\nimport org.Server.Service.UserSession;\n\nimport java.rmi.RemoteException;\nimport java.sql.Date;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\npublic class TestApp {\n    public static void main(String[] args) {\n\n        User user1 = new User(\n                \"123456789\",\n                \"John Doe\",\n                \"john@example.com\",\n                null,\n                \"hashed_password\",\n                \"Male\",\n                \"USA\",\n                Date.valueOf(\"2000-01-01\"),\n                \"Bio goes here\",\n                \"Available\",\n                \"Online\",\n                Timestamp.valueOf(\"2022-01-01 12:00:00\")\n        );\n        User user2 = new User(\n                \"987654321\",\n                \"Jane Smith\",\n                \"jane@example.com\",\n                null,\n                \"hashed_password\",\n                \"Female\",\n                \"Canada\",\n                Date.valueOf(\"1995-05-15\"),\n                \"Another bio\",\n                \"Busy\",\n                \"Offline\",\n                Timestamp.valueOf(\"2022-01-02 10:30:00\")\n        );\n\n        try {\n            DatabaseConnectionManager connectionManager = DatabaseConnectionManager.getInstance();\n            UserService userService = new UserService(new UserRepository(connectionManager.getMyConnection()));\n//            userService.registerUser(user1);\n//            userService.registerUser(user2);\n\n            UserSession.setCurrentUser(userService.existsById(user2.getPhoneNumber()));\n            System.out.println(\"Logged Userid \" + userService.existsById(user2.getPhoneNumber()).getUserID());\n            System.out.println(\"User To Be Accepted Userid \" + userService.existsById(user1.getPhoneNumber()).getUserID());\n\n\n            InvitationService invitationService = new InvitationService(\n                    userService,\n                    new UserNotificationRepository(connectionManager.getMyConnection())\n            );\n\n            ContactService contactService = new ContactService(\n                    invitationService,\n                    new ContactsRepository(connectionManager.getMyConnection()),\n                    UserSession.getCurrentUser(),\n                    userService\n            );\n\n            contactService.acceptContact(user1.getPhoneNumber());\n\n        } catch (RemoteException | SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/TestApp.java b/server/src/main/java/org/Server/TestApp.java
--- a/server/src/main/java/org/Server/TestApp.java	
+++ b/server/src/main/java/org/Server/TestApp.java	
@@ -1,9 +1,8 @@
 package org.Server;
-import Model.Entities.User;
+import org.Server.ServerModels.ServerEntities.User;
 import org.Server.Repository.ContactsRepository;
 import org.Server.Repository.DatabaseConnectionManager;
 import org.Server.Repository.UserNotificationRepository;
-import org.Server.Repository.UserRepository;
 import org.Server.Service.Contacts.ContactService;
 import org.Server.Service.Contacts.InvitationService;
 import org.Server.Service.User.UserService;
@@ -47,13 +46,13 @@
 
         try {
             DatabaseConnectionManager connectionManager = DatabaseConnectionManager.getInstance();
-            UserService userService = new UserService(new UserRepository(connectionManager.getMyConnection()));
+            UserService userService = new UserService();
 //            userService.registerUser(user1);
 //            userService.registerUser(user2);
 
-            UserSession.setCurrentUser(userService.existsById(user2.getPhoneNumber()));
-            System.out.println("Logged Userid " + userService.existsById(user2.getPhoneNumber()).getUserID());
-            System.out.println("User To Be Accepted Userid " + userService.existsById(user1.getPhoneNumber()).getUserID());
+            UserSession.setCurrentUser(userService.existsByPhoneNumber(user2.getPhoneNumber()));
+            System.out.println("Logged Userid " + userService.existsByPhoneNumber(user2.getPhoneNumber()).getUserID());
+            System.out.println("User To Be Accepted Userid " + userService.existsByPhoneNumber(user1.getPhoneNumber()).getUserID());
 
 
             InvitationService invitationService = new InvitationService(
@@ -70,7 +69,7 @@
 
             contactService.acceptContact(user1.getPhoneNumber());
 
-        } catch (RemoteException | SQLException e) {
+        } catch (RemoteException e) {
             throw new RuntimeException(e);
         }
 
Index: server/src/main/java/org/Server/Service/Factories/ServicesFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/Factories/ServicesFactory.java b/server/src/main/java/org/Server/Service/Factories/ServicesFactory.java
new file mode 100755
--- /dev/null	
+++ b/server/src/main/java/org/Server/Service/Factories/ServicesFactory.java	
@@ -0,0 +1,18 @@
+package org.Server.Service.Factories;
+
+import Interfaces.ServicesFactoryInterface;
+import org.Server.Service.User.UserService;
+
+
+import java.rmi.RemoteException;
+import java.rmi.server.UnicastRemoteObject;
+
+
+public class ServicesFactory extends UnicastRemoteObject implements ServicesFactoryInterface {
+    public ServicesFactory() throws RemoteException {
+        super();
+    }
+    public UserService createUserService() throws RemoteException {
+        return new UserService();
+    }
+}
Index: server/src/main/java/org/Server/Repository/ChatRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.Entities.Chat;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatRepository implements Repository<Chat,Integer> {\n    private final Connection connection;\n\n    public ChatRepository(Connection connection) {\n        this.connection = connection;\n    }\n\n    @Override\n    public void save(Chat entity)  {\n        String query = \"INSERT INTO Chat (ChatName,ChatImage,AdminID) VALUES (?, ?, ?)\";\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, entity.getChatName());\n            preparedStatement.setBytes(2, entity.getChatImage());\n            preparedStatement.setInt(3, entity.getAdminID());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public Chat findById(Integer integer) throws SQLException {\n        String query =\"select * from Chat where ChatID = ?\";\n        Chat chat= new Chat();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1,integer);\n            try(ResultSet resultSet =preparedStatement.executeQuery()) {\n                if (resultSet.next()) {\n                    chat.setChatID(integer);\n                    chat.setChatName(resultSet.getString(\"ChatName\"));\n                    chat.setChatImage(resultSet.getBytes(\"ChatImage\"));\n                    chat.setAdminID(resultSet.getInt(\"AdminID\"));\n                    chat.setCreationDate(resultSet.getTimestamp(\"CreationDate\"));\n                    chat.setLastModified(resultSet.getTimestamp(\"LastModified\"));\n                }\n            }\n        }\n        return chat;\n\n    }\n\n    @Override\n    public List<Chat> findAll() {\n        String query =\"select * from Chat\";\n        List<Chat> chats= new ArrayList<>();\n        \n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    Chat chat = new Chat();\n                    chat.setChatID(resultSet.getInt(\"ChatID\"));\n                    chat.setChatName(resultSet.getString(\"ChatName\"));\n                    chat.setChatImage(resultSet.getBytes(\"ChatImage\"));\n                    chat.setAdminID(resultSet.getInt(\"AdminID\"));\n                    chat.setCreationDate(resultSet.getTimestamp(\"CreationDate\"));\n                    chat.setLastModified(resultSet.getTimestamp(\"LastModified\"));\n                    chats.add(chat);\n                }\n            }\n        }\n        catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return chats;\n    }\n\n    @Override\n    public void deleteById(Integer id) throws SQLException {\n        String query = \"DELETE FROM Chat WHERE ChatID = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, id);\n            preparedStatement.executeUpdate();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/ChatRepository.java b/server/src/main/java/org/Server/Repository/ChatRepository.java
--- a/server/src/main/java/org/Server/Repository/ChatRepository.java	
+++ b/server/src/main/java/org/Server/Repository/ChatRepository.java	
@@ -1,7 +1,7 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.Entities.Chat;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.Chat;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
Index: shared/src/main/java/Model/DTO/UserRegistrationDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model.DTO;\n\nimport Model.Entities.User;\n\nimport java.io.Serializable;\nimport java.sql.Date;\nimport java.sql.Timestamp;\nimport java.time.LocalDate;\n\npublic class UserRegistrationDTO implements Serializable {\n    private String phoneNumber;\n    private String displayName;\n    private String emailAddress;\n    private String passwordHash;\n    private String gender;\n    private String country;\n    private Date dateOfBirth;\n\n    public UserRegistrationDTO(String phoneNumber, String displayName, String emailAddress, String passwordHash, String gender, String country, Date dateOfBirth) {\n        this.phoneNumber = phoneNumber;\n        this.displayName = displayName;\n        this.emailAddress = emailAddress;\n        this.passwordHash = passwordHash;\n        this.gender = gender;\n        this.country = country;\n        this.dateOfBirth = dateOfBirth;\n    }\n    public User toUser() {\n        User user = new User(// Assuming userID is not available at the time of registration or set to 0 as a placeholder\n                this.phoneNumber,\n                this.displayName,\n                this.emailAddress,\n                null,  // You may need to handle profile picture separately\n                this.passwordHash,\n                this.gender,\n                this.country,\n                this.dateOfBirth,\n                null,  // bio is not available at the time of registration\n                \"Available\",  // Assuming default user status is \"Offline\"\n                \"Offline\",  // Assuming default user mode is \"Offline\"\n                null  // lastLogin is not available at the time of registration\n        );\n        return user;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public String getEmailAddress() {\n        return emailAddress;\n    }\n\n    public void setEmailAddress(String emailAddress) {\n        this.emailAddress = emailAddress;\n    }\n\n    public String getPasswordHash() {\n        return passwordHash;\n    }\n\n    public void setPasswordHash(String passwordHash) {\n        this.passwordHash = passwordHash;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public Date getDateOfBirth() {\n        return dateOfBirth;\n    }\n\n    public void setDateOfBirth(Date dateOfBirth) {\n        this.dateOfBirth = dateOfBirth;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/DTO/UserRegistrationDTO.java b/shared/src/main/java/Model/DTO/UserRegistrationDTO.java
--- a/shared/src/main/java/Model/DTO/UserRegistrationDTO.java	
+++ b/shared/src/main/java/Model/DTO/UserRegistrationDTO.java	
@@ -1,11 +1,8 @@
 package Model.DTO;
 
-import Model.Entities.User;
 
 import java.io.Serializable;
 import java.sql.Date;
-import java.sql.Timestamp;
-import java.time.LocalDate;
 
 public class UserRegistrationDTO implements Serializable {
     private String phoneNumber;
@@ -25,23 +22,6 @@
         this.country = country;
         this.dateOfBirth = dateOfBirth;
     }
-    public User toUser() {
-        User user = new User(// Assuming userID is not available at the time of registration or set to 0 as a placeholder
-                this.phoneNumber,
-                this.displayName,
-                this.emailAddress,
-                null,  // You may need to handle profile picture separately
-                this.passwordHash,
-                this.gender,
-                this.country,
-                this.dateOfBirth,
-                null,  // bio is not available at the time of registration
-                "Available",  // Assuming default user status is "Offline"
-                "Offline",  // Assuming default user mode is "Offline"
-                null  // lastLogin is not available at the time of registration
-        );
-        return user;
-    }
 
     public String getPhoneNumber() {
         return phoneNumber;
Index: shared/src/main/java/Model/Entities/ChatParticipants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/ChatParticipants.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/ChatParticipants.java
rename from shared/src/main/java/Model/Entities/ChatParticipants.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/ChatParticipants.java
--- a/shared/src/main/java/Model/Entities/ChatParticipants.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/ChatParticipants.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.sql.Timestamp;
 
Index: shared/src/main/java/Model/Entities/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Message.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Message.java
rename from shared/src/main/java/Model/Entities/Message.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Message.java
--- a/shared/src/main/java/Model/Entities/Message.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Message.java	
@@ -1,7 +1,6 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.sql.Timestamp;
-import java.util.Date;
 
 public class Message {
     private int messageID;
Index: shared/src/main/java/Model/Entities/Contact.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Contact.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Contact.java
rename from shared/src/main/java/Model/Entities/Contact.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Contact.java
--- a/shared/src/main/java/Model/Entities/Contact.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Contact.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.sql.Timestamp;
 
Index: shared/src/main/java/Model/Entities/BlockedContact.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/BlockedContact.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/BlockedContact.java
rename from shared/src/main/java/Model/Entities/BlockedContact.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/BlockedContact.java
--- a/shared/src/main/java/Model/Entities/BlockedContact.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/BlockedContact.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 public class BlockedContact {
     private int userID;
Index: shared/src/main/java/Model/Entities/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/User.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/User.java
rename from shared/src/main/java/Model/Entities/User.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/User.java
--- a/shared/src/main/java/Model/Entities/User.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/User.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.io.Serializable;
 import java.sql.Timestamp;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n    <option name=\"workspaceImportForciblyTurnedOn\" value=\"true\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"21\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -7,7 +7,6 @@
         <option value="$PROJECT_DIR$/pom.xml" />
       </list>
     </option>
-    <option name="workspaceImportForciblyTurnedOn" value="true" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: shared/src/main/java/Model/Entities/Attachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Attachment.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Attachment.java
rename from shared/src/main/java/Model/Entities/Attachment.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Attachment.java
--- a/shared/src/main/java/Model/Entities/Attachment.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Attachment.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 public class Attachment {
     private int attachmentID;
Index: shared/src/main/java/Model/Entities/Chat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Chat.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Chat.java
rename from shared/src/main/java/Model/Entities/Chat.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Chat.java
--- a/shared/src/main/java/Model/Entities/Chat.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Chat.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.sql.Timestamp;
 
Index: shared/src/main/java/Model/Entities/ServerAnnouncement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/ServerAnnouncement.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/ServerAnnouncement.java
rename from shared/src/main/java/Model/Entities/ServerAnnouncement.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/ServerAnnouncement.java
--- a/shared/src/main/java/Model/Entities/ServerAnnouncement.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/ServerAnnouncement.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.util.Date;
 
Index: shared/src/main/java/Model/Entities/GroupMember.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/GroupMember.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/GroupMember.java
rename from shared/src/main/java/Model/Entities/GroupMember.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/GroupMember.java
--- a/shared/src/main/java/Model/Entities/GroupMember.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/GroupMember.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 public class GroupMember {
     private int groupID;
Index: shared/src/main/java/Model/Entities/Group.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Group.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Group.java
rename from shared/src/main/java/Model/Entities/Group.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Group.java
--- a/shared/src/main/java/Model/Entities/Group.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Group.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 public class Group {
     private int groupID;
Index: shared/src/main/java/Model/Entities/UserNotification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/UserNotification.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/UserNotification.java
rename from shared/src/main/java/Model/Entities/UserNotification.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/UserNotification.java
--- a/shared/src/main/java/Model/Entities/UserNotification.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/UserNotification.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 import java.sql.Timestamp;
 public class UserNotification {
     private int notificationID;
Index: shared/src/main/java/Model/Entities/Notification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Entities/Notification.java b/server/src/main/java/org/Server/ServerModels/ServerEntities/Notification.java
rename from shared/src/main/java/Model/Entities/Notification.java
rename to server/src/main/java/org/Server/ServerModels/ServerEntities/Notification.java
--- a/shared/src/main/java/Model/Entities/Notification.java	
+++ b/server/src/main/java/org/Server/ServerModels/ServerEntities/Notification.java	
@@ -1,4 +1,4 @@
-package Model.Entities;
+package org.Server.ServerModels.ServerEntities;
 
 import java.util.Date;
 
Index: server/src/main/java/org/Server/RepoInterfaces/UserRepoInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/RepoInterfaces/UserRepoInterface.java b/server/src/main/java/org/Server/RepoInterfaces/UserRepoInterface.java
new file mode 100755
--- /dev/null	
+++ b/server/src/main/java/org/Server/RepoInterfaces/UserRepoInterface.java	
@@ -0,0 +1,12 @@
+package org.Server.RepoInterfaces;
+
+import org.Server.ServerModels.ServerEntities.User;
+import org.Server.ServerModels.Enums.StatusEnum;
+
+import java.sql.SQLException;
+
+public interface UserRepoInterface extends Repository<User,Integer>{
+    User findByPhoneNumber(String phoneNumber) throws SQLException;
+    void updateStatus(String phoneNumber, StatusEnum status) throws SQLException;
+    void update(String phoneNumber, String fieldName, String value) throws SQLException;
+}
Index: server/src/main/java/org/Server/Service/Contacts/InvitationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service.Contacts;\n\nimport Model.Entities.User;\nimport Model.Entities.UserNotification;\nimport org.Server.Repository.UserNotificationRepository;\nimport org.Server.Service.User.UserService;\nimport org.Server.Service.UserSession;\n\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class InvitationService {\n\n    private final UserService userService;\n    private final UserNotificationRepository userNotificationRepository;\n    public InvitationService(UserService userService, UserNotificationRepository userNotificationRepository){\n        this.userService = userService;\n        this.userNotificationRepository = userNotificationRepository;\n    }\n    public void sendInvitation(User loggedUser, String contactPhoneNumber) throws NullPointerException{\n        //get the logged user and check if there is a logged user\n        User invitedUser;\n        if(loggedUser==null){\n            throw new NullPointerException(\"You Must Be Signed In\");\n        }\n        try {\n            invitedUser = userService.existsById(contactPhoneNumber);\n\n            if(invitedUser==null){\n                return;\n            }\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Server Error....\");\n        }\n        //try to send invitation from logged user to the new contact\n        try {\n\n            System.out.println(\"loggedUserID... \" + loggedUser.getUserID());\n            System.out.println(\"invitedUserID... \" + invitedUser.getUserID());\n\n            UserNotification notification = new UserNotification(loggedUser.getUserID(), invitedUser.getUserID(),\n                   \"Please Accept My Invitation\", new Timestamp(System.currentTimeMillis()));\n            userNotificationRepository.save(notification);\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Server Error....\" + e.getMessage());\n        }\n    }\n    public void deleteInvitation(Integer UserInvitationIdToBeDeleted) {\n\n        Optional<Integer> invitationId;\n        List<UserNotification> userNotificationList;\n        userNotificationList = getInvitations();\n\n        invitationId = userNotificationList.stream()\n                .filter(e-> e.getSenderID() == UserInvitationIdToBeDeleted)\n                        .map(UserNotification::getNotificationID).findAny();\n\n        if(invitationId.isPresent()){\n            try {\n                System.out.println(\"NotificationID \" + invitationId.get());\n                userNotificationRepository.deleteById(invitationId.get());\n            } catch (SQLException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n    }\n    public List<UserNotification> getInvitations(){\n        List<UserNotification> notificationList;\n        User loggedUser = UserSession.getCurrentUser();\n        try {\n            notificationList = userNotificationRepository.getInvitationsForUser(loggedUser.getUserID());\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n        return notificationList;\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/Contacts/InvitationService.java b/server/src/main/java/org/Server/Service/Contacts/InvitationService.java
--- a/server/src/main/java/org/Server/Service/Contacts/InvitationService.java	
+++ b/server/src/main/java/org/Server/Service/Contacts/InvitationService.java	
@@ -1,7 +1,7 @@
 package org.Server.Service.Contacts;
 
-import Model.Entities.User;
-import Model.Entities.UserNotification;
+import org.Server.ServerModels.ServerEntities.User;
+import org.Server.ServerModels.ServerEntities.UserNotification;
 import org.Server.Repository.UserNotificationRepository;
 import org.Server.Service.User.UserService;
 import org.Server.Service.UserSession;
@@ -25,14 +25,10 @@
         if(loggedUser==null){
             throw new NullPointerException("You Must Be Signed In");
         }
-        try {
-            invitedUser = userService.existsById(contactPhoneNumber);
+        invitedUser = userService.existsByPhoneNumber(contactPhoneNumber);
 
-            if(invitedUser==null){
-                return;
-            }
-        } catch (SQLException e) {
-            throw new RuntimeException("Server Error....");
+        if(invitedUser==null){
+            return;
         }
         //try to send invitation from logged user to the new contact
         try {
Index: server/src/main/java/org/Server/Service/Contacts/ContactService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service.Contacts;\n\nimport Model.Entities.Contact;\nimport Model.Entities.User;\nimport Model.Entities.UserNotification;\nimport org.Server.Repository.ContactsRepository;\nimport org.Server.Service.User.UserService;\n\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class ContactService {\n    private final InvitationService invitationService;\n    private final ContactsRepository contactsRepository;\n    private final User loggedUser;\n    private final UserService userService;\n\n\n\n\n    public ContactService(InvitationService invitationService, ContactsRepository contactsRepository,\n                           User loggedUser, UserService userService){\n        this.invitationService = invitationService;\n        this.contactsRepository = contactsRepository;\n        this.loggedUser = loggedUser;\n        this.userService = userService;\n    }\n    public void addContact(String phone){\n        invitationService.sendInvitation(loggedUser, phone);\n    }\n    public void acceptContact(String acceptedUserPhoneNumber){\n        User acceptedUser;\n        try {\n             acceptedUser = userService.existsById(acceptedUserPhoneNumber);\n             if(acceptedUser!=null){\n//                 invitationService.deleteInvitation(acceptedUser.getUserID());\n\n                 Contact contact = new Contact(loggedUser.getUserID(),acceptedUser.getUserID(),new Timestamp(System.currentTimeMillis()));\n                 contactsRepository.save(contact);\n             }\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n    public void cancelContact(String canceledUserPhoneNumber){\n        User canceledUser;\n        try {\n            canceledUser = userService.existsById(canceledUserPhoneNumber);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n        invitationService.deleteInvitation(canceledUser.getUserID());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/Contacts/ContactService.java b/server/src/main/java/org/Server/Service/Contacts/ContactService.java
--- a/server/src/main/java/org/Server/Service/Contacts/ContactService.java	
+++ b/server/src/main/java/org/Server/Service/Contacts/ContactService.java	
@@ -1,15 +1,12 @@
 package org.Server.Service.Contacts;
 
-import Model.Entities.Contact;
-import Model.Entities.User;
-import Model.Entities.UserNotification;
+import org.Server.ServerModels.ServerEntities.Contact;
+import org.Server.ServerModels.ServerEntities.User;
 import org.Server.Repository.ContactsRepository;
 import org.Server.Service.User.UserService;
 
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.List;
-import java.util.Optional;
 
 public class ContactService {
     private final InvitationService invitationService;
@@ -33,7 +30,7 @@
     public void acceptContact(String acceptedUserPhoneNumber){
         User acceptedUser;
         try {
-             acceptedUser = userService.existsById(acceptedUserPhoneNumber);
+             acceptedUser = userService.existsByPhoneNumber(acceptedUserPhoneNumber);
              if(acceptedUser!=null){
 //                 invitationService.deleteInvitation(acceptedUser.getUserID());
 
@@ -47,11 +44,7 @@
     }
     public void cancelContact(String canceledUserPhoneNumber){
         User canceledUser;
-        try {
-            canceledUser = userService.existsById(canceledUserPhoneNumber);
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
-        }
+        canceledUser = userService.existsByPhoneNumber(canceledUserPhoneNumber);
         invitationService.deleteInvitation(canceledUser.getUserID());
     }
 
Index: server/src/main/java/org/Server/Service/UserSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Service;\nimport Model.DTO.UserLoginDTO;\nimport Model.Entities.User;\n\npublic class UserSession {\n    private static User currentUser;\n    public static User getCurrentUser() {\n        return currentUser;\n    }\n    public static void setCurrentUser(User user) {\n        currentUser = user;\n    }\n    public static void clearSession() {\n        currentUser = null;\n    }\n    public static boolean isLoggedIn() {\n        return currentUser != null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Service/UserSession.java b/server/src/main/java/org/Server/Service/UserSession.java
--- a/server/src/main/java/org/Server/Service/UserSession.java	
+++ b/server/src/main/java/org/Server/Service/UserSession.java	
@@ -1,6 +1,5 @@
 package org.Server.Service;
-import Model.DTO.UserLoginDTO;
-import Model.Entities.User;
+import org.Server.ServerModels.ServerEntities.User;
 
 public class UserSession {
     private static User currentUser;
Index: shared/src/main/java/Exceptions/CustomException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Exceptions/CustomException.java b/shared/src/main/java/Exceptions/CustomException.java
new file mode 100755
--- /dev/null	
+++ b/shared/src/main/java/Exceptions/CustomException.java	
@@ -0,0 +1,12 @@
+package Exceptions;
+public class CustomException extends Exception{
+    private final String description;
+
+    public CustomException(String description) {
+        this.description = description;
+
+    }
+    public String getDescription() {
+        return description;
+    }
+}
\ No newline at end of file
Index: client/src/main/java/org/Client/Views/ViewFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Client.Views;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\npublic class ViewFactory {\n    Stage stage;\n    public ViewFactory(){}\n    public void showRegisterWindow(){\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Register.fxml\"));\n        sceneMaker(loader);\n    }\n    public void showLoginWindow(){\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login.fxml\"));\n        sceneMaker(loader);\n    }\n    public void showRegistrationWindow(){\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Register.fxml\"));\n        sceneMaker(loader);\n    }\n    private void sceneMaker(FXMLLoader loader) {\n        Scene scene = null;\n        try{\n            scene = new Scene(loader.load());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        if(stage==null){\n            stage = new Stage();\n            stage.setMinWidth(400);\n            stage.setMinHeight(600);\n        }\n        stage.setScene(scene);\n        stage.setTitle(\"Chat App\");\n        stage.show();\n        stage.setResizable(true);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/Views/ViewFactory.java b/client/src/main/java/org/Client/Views/ViewFactory.java
--- a/client/src/main/java/org/Client/Views/ViewFactory.java	
+++ b/client/src/main/java/org/Client/Views/ViewFactory.java	
@@ -7,15 +7,15 @@
     Stage stage;
     public ViewFactory(){}
     public void showRegisterWindow(){
-        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/Register.fxml"));
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("/ClientFxml/Register.fxml"));
         sceneMaker(loader);
     }
     public void showLoginWindow(){
-        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/Login.fxml"));
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("/ClientFxml/Login.fxml"));
         sceneMaker(loader);
     }
     public void showRegistrationWindow(){
-        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/Register.fxml"));
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("/ClientFxml/Register.fxml"));
         sceneMaker(loader);
     }
     private void sceneMaker(FXMLLoader loader) {
@@ -31,7 +31,7 @@
             stage.setMinHeight(600);
         }
         stage.setScene(scene);
-        stage.setTitle("Chat App");
+        stage.setTitle("Chat ServerApplication");
         stage.show();
         stage.setResizable(true);
     }
Index: shared/src/main/java/Interfaces/RemoteLoginService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Interfaces;\n\n\nimport Model.DTO.UserLoginDTO;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\n\npublic interface RemoteLoginService extends Remote {\n    int loginUser(UserLoginDTO userLoginDTO) throws RemoteException;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Interfaces/RemoteLoginService.java b/shared/src/main/java/Interfaces/RemoteLoginService.java
--- a/shared/src/main/java/Interfaces/RemoteLoginService.java	
+++ b/shared/src/main/java/Interfaces/RemoteLoginService.java	
@@ -1,11 +1,10 @@
 package Interfaces;
 
-
 import Model.DTO.UserLoginDTO;
 
-import java.rmi.Remote;
+import java.io.Serializable;
 import java.rmi.RemoteException;
 
-public interface RemoteLoginService extends Remote {
-    int loginUser(UserLoginDTO userLoginDTO) throws RemoteException;
+public interface RemoteLoginService extends Serializable {
+    boolean loginUser(UserLoginDTO userLoginDTO) throws RemoteException;
 }
Index: shared/src/main/java/Interfaces/RemoteRegistrationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Interfaces;\nimport Model.DTO.UserRegistrationDTO;\n\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport java.sql.Date;\nimport java.sql.SQLException;\n\npublic interface RemoteRegistrationService extends Remote {\n    int registerUser(UserRegistrationDTO userDTO) throws RemoteException, SQLException;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Interfaces/RemoteRegistrationService.java b/shared/src/main/java/Interfaces/RemoteRegistrationService.java
--- a/shared/src/main/java/Interfaces/RemoteRegistrationService.java	
+++ b/shared/src/main/java/Interfaces/RemoteRegistrationService.java	
@@ -1,11 +1,12 @@
 package Interfaces;
+
+import Exceptions.CustomException;
 import Model.DTO.UserRegistrationDTO;
 
-import java.rmi.Remote;
-import java.rmi.RemoteException;
-import java.sql.Date;
+import java.io.Serializable;
 import java.sql.SQLException;
 
-public interface RemoteRegistrationService extends Remote {
-    int registerUser(UserRegistrationDTO userDTO) throws RemoteException, SQLException;
-}
\ No newline at end of file
+public interface RemoteRegistrationService extends Serializable {
+
+    boolean registerUser(UserRegistrationDTO user) throws CustomException, SQLException;
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>ChatApp</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <modules>\n        <module>client</module>\n        <module>server</module>\n        <module>shared</module>\n    </modules>\n\n    <properties>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.openjfx</groupId>\n                <artifactId>javafx-maven-plugin</artifactId>\n                <version>0.0.8</version>\n                <configuration>\n                    <mainClass>ChatApp/org.openjfx.org.Server.App</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-graphics</artifactId>\n            <version>19.0.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-controls</artifactId>\n            <version>19.0.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-controls</artifactId>\n            <version>18.0.1</version> <!-- Replace with your desired JavaFX version -->\n        </dependency>\n\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-fxml</artifactId>\n            <version>18.0.1</version> <!-- Replace with your desired JavaFX version -->\n        </dependency>\n    </dependencies>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -27,7 +27,7 @@
                 <artifactId>javafx-maven-plugin</artifactId>
                 <version>0.0.8</version>
                 <configuration>
-                    <mainClass>ChatApp/org.openjfx.org.Server.App</mainClass>
+                    <mainClass>ChatApp/org.openjfx.org.Server.ServerApplication</mainClass>
                 </configuration>
             </plugin>
         </plugins>
Index: client/src/main/java/org/Client/Controllers/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Client.Controllers;\nimport Interfaces.RemoteLoginService;\nimport Model.DTO.UserLoginDTO;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.*;\nimport org.Client.Models.Model;\n\n\nimport java.net.URL;\nimport java.rmi.NotBoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.util.ResourceBundle;\n\npublic class LoginController implements Initializable {\n    public Label registerLabel;\n    public Button signingButton;\n    public PasswordField passwordField;\n    public TextField phoneField;\n    private RemoteServiceHandler remoteServiceHandler;\n    @Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n\n        remoteServiceHandler = RemoteServiceHandler.getInstance();\n        signingButton.setOnAction((e)->handleSignIn());\n        registerLabel.setOnMouseClicked(e-> Model.getInstance().getViewFactory().showRegistrationWindow());\n    }\n\n    private void handleSignIn() {\n        try {\n            validateUserInputLogin();\n\n            String phoneNumber = phoneField.getText();\n            String password = passwordField.getText();\n            UserLoginDTO userLogin = new UserLoginDTO(phoneNumber, password);\n\n            int loginResult = remoteServiceHandler.getRemoteLoginService().loginUser(userLogin);\n            handleLoginResult(loginResult);\n\n        }catch (IllegalArgumentException e) {\n            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);\n        } catch (RemoteException e) {\n            handleException(\"Error during login\", e);\n        } finally {\n            clearLoginFields();\n        }\n    }\n    private void handleLoginResult(int loginResult) {\n        if (loginResult == 0) {\n            remoteServiceHandler.showAlert(\"Login Successful\", Alert.AlertType.INFORMATION);\n        } else if (loginResult == 1) {\n            remoteServiceHandler.showAlert(\"Invalid Phone Number or Password\", Alert.AlertType.WARNING);\n        } else {\n            remoteServiceHandler.showAlert(\"User Services Failed\", Alert.AlertType.ERROR);\n        }\n    }\n    private void handleException(String message, Exception exception) {\n        remoteServiceHandler.showAlert(message + \": \" + exception.getMessage(), Alert.AlertType.ERROR);\n    }\n    private void validateUserInputLogin() {\n        if (phoneField.getText().isEmpty() || passwordField.getText().isEmpty()) {\n            throw new IllegalArgumentException(\"Please enter both phone number and password\");\n        }\n        if (!isPhoneNumberValid(phoneField.getText())) {\n            throw new IllegalArgumentException(\"Please enter a valid phone number\");\n        }\n    }\n    private boolean isPhoneNumberValid(String phoneNumber) {\n        return phoneNumber.matches(\"[0-9]+\");\n    }\n\n    private void clearLoginFields() {\n        phoneField.clear();\n        passwordField.clear();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/Controllers/LoginController.java b/client/src/main/java/org/Client/Controllers/LoginController.java
--- a/client/src/main/java/org/Client/Controllers/LoginController.java	
+++ b/client/src/main/java/org/Client/Controllers/LoginController.java	
@@ -1,5 +1,4 @@
 package org.Client.Controllers;
-import Interfaces.RemoteLoginService;
 import Model.DTO.UserLoginDTO;
 import javafx.fxml.Initializable;
 import javafx.scene.control.*;
@@ -7,10 +6,7 @@
 
 
 import java.net.URL;
-import java.rmi.NotBoundException;
 import java.rmi.RemoteException;
-import java.rmi.registry.LocateRegistry;
-import java.rmi.registry.Registry;
 import java.util.ResourceBundle;
 
 public class LoginController implements Initializable {
@@ -35,28 +31,26 @@
             String password = passwordField.getText();
             UserLoginDTO userLogin = new UserLoginDTO(phoneNumber, password);
 
-            int loginResult = remoteServiceHandler.getRemoteLoginService().loginUser(userLogin);
+            boolean loginResult = remoteServiceHandler.getRemoteUserService().signInUser(userLogin);
             handleLoginResult(loginResult);
 
         }catch (IllegalArgumentException e) {
             remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
         } catch (RemoteException e) {
-            handleException("Error during login", e);
+            handleException(e);
         } finally {
             clearLoginFields();
         }
     }
-    private void handleLoginResult(int loginResult) {
-        if (loginResult == 0) {
+    private void handleLoginResult(boolean loginResult) {
+        if (loginResult) {
             remoteServiceHandler.showAlert("Login Successful", Alert.AlertType.INFORMATION);
-        } else if (loginResult == 1) {
-            remoteServiceHandler.showAlert("Invalid Phone Number or Password", Alert.AlertType.WARNING);
         } else {
-            remoteServiceHandler.showAlert("User Services Failed", Alert.AlertType.ERROR);
+            remoteServiceHandler.showAlert("Invalid Phone Number or Password", Alert.AlertType.WARNING);
         }
     }
-    private void handleException(String message, Exception exception) {
-        remoteServiceHandler.showAlert(message + ": " + exception.getMessage(), Alert.AlertType.ERROR);
+    private void handleException(Exception exception) {
+        remoteServiceHandler.showAlert("Error during login" + ": " + exception.getMessage(), Alert.AlertType.ERROR);
     }
     private void validateUserInputLogin() {
         if (phoneField.getText().isEmpty() || passwordField.getText().isEmpty()) {
Index: client/src/main/java/org/Client/Controllers/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Client.Controllers;\nimport Interfaces.RemoteRegistrationService;\nimport Model.DTO.UserRegistrationDTO;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.*;\nimport javafx.scene.control.TextField;\nimport java.net.URL;\nimport java.rmi.NotBoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.sql.Date;\nimport java.sql.SQLException;\nimport java.time.LocalDate;\nimport java.util.ResourceBundle;\n\npublic class RegisterController implements Initializable {\n    @FXML\n    public TextField nameField;\n    @FXML\n    public TextField phoneNumberField;\n    @FXML\n    public TextField emailField;\n    @FXML\n    public PasswordField passwordField;\n    @FXML\n    public PasswordField confirmPasswordField;\n    @FXML\n    public DatePicker dateOfBirthPicker;\n    @FXML\n    public RadioButton maleRadioButton;\n    @FXML\n    public ComboBox<String> countryComboBox;\n    @FXML\n    public Button registerButton;\n\n\n    public RemoteServiceHandler remoteServiceHandler;\n\n    @Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n\n        remoteServiceHandler = RemoteServiceHandler.getInstance();\n        registerButton.setOnAction(e -> handleRegistration());\n    }\n\n    private void handleRegistration() {\n        try {\n\n            validateUserInput();\n\n            String phoneNumber = phoneNumberField.getText();\n            String name = nameField.getText();\n            String email = emailField.getText();\n            String password = passwordField.getText();\n            Date dateOfBirth = Date.valueOf(dateOfBirthPicker.getValue());\n            String gender = maleRadioButton.isSelected() ? \"Male\" : \"Female\";\n            String country = countryComboBox.getValue();\n\n            UserRegistrationDTO userRegistrationDTO = new UserRegistrationDTO(\n                    phoneNumber, name, email, password, gender, country, dateOfBirth\n            );\n\n            int registrationResult = remoteServiceHandler.getRegistrationService().registerUser(userRegistrationDTO);\n            handleRegistrationResult(registrationResult);\n\n        } catch (IllegalArgumentException e) {\n            remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);\n        } catch (RemoteException | SQLException e) {\n            handleException(\"Error during registration\", e);\n        } finally {\n            clearRegistrationFields();\n        }\n    }\n    private void handleException(String message, Exception exception) {\n        remoteServiceHandler.showAlert(message + \": \" + exception.getMessage(), Alert.AlertType.ERROR);\n    }\n    private void validateUserInput() {\n        if (nameField.getText().isEmpty() || phoneNumberField.getText().isEmpty() ||\n                emailField.getText().isEmpty() || passwordField.getText().isEmpty() ||\n                confirmPasswordField.getText().isEmpty() || dateOfBirthPicker.getValue() == null ||\n                countryComboBox.getValue() == null || (maleRadioButton.isSelected() && countryComboBox.getValue().isEmpty())) {\n            throw new IllegalArgumentException(\"Please fill in all fields\");\n        }\n        if (!passwordField.getText().equals(confirmPasswordField.getText())) {\n            throw new IllegalArgumentException(\"Password and Confirm Password do not match\");\n        }\n        if (!isPhoneNumberValid(phoneNumberField.getText())) {\n            throw new IllegalArgumentException(\"Please enter a valid phone number\");\n        }\n        if (dateOfBirthPicker.getValue().isAfter(Date.valueOf(LocalDate.now()).toLocalDate())) {\n            throw new IllegalArgumentException(\"Date of birth must be in the past\");\n        }\n    }\n    private boolean isPhoneNumberValid(String phoneNumber) {\n        return phoneNumber.matches(\"[0-9]+\");\n    }\n    private void clearRegistrationFields() {\n        nameField.clear();\n        phoneNumberField.clear();\n        emailField.clear();\n        passwordField.clear();\n        confirmPasswordField.clear();\n        dateOfBirthPicker.setValue(null);\n    }\n    private void handleRegistrationResult(int registrationResult) {\n        if (registrationResult == 0) {\n            remoteServiceHandler.showAlert(\"User is Already Existed\", Alert.AlertType.INFORMATION);\n        } else if (registrationResult == 1) {\n            remoteServiceHandler.showAlert(\"Sign Up Successfully\", Alert.AlertType.INFORMATION);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/org/Client/Controllers/RegisterController.java b/client/src/main/java/org/Client/Controllers/RegisterController.java
--- a/client/src/main/java/org/Client/Controllers/RegisterController.java	
+++ b/client/src/main/java/org/Client/Controllers/RegisterController.java	
@@ -1,17 +1,12 @@
 package org.Client.Controllers;
-import Interfaces.RemoteRegistrationService;
 import Model.DTO.UserRegistrationDTO;
 import javafx.fxml.FXML;
 import javafx.fxml.Initializable;
 import javafx.scene.control.*;
 import javafx.scene.control.TextField;
 import java.net.URL;
-import java.rmi.NotBoundException;
 import java.rmi.RemoteException;
-import java.rmi.registry.LocateRegistry;
-import java.rmi.registry.Registry;
 import java.sql.Date;
-import java.sql.SQLException;
 import java.time.LocalDate;
 import java.util.ResourceBundle;
 
@@ -62,19 +57,19 @@
                     phoneNumber, name, email, password, gender, country, dateOfBirth
             );
 
-            int registrationResult = remoteServiceHandler.getRegistrationService().registerUser(userRegistrationDTO);
+            boolean registrationResult = remoteServiceHandler.getRemoteUserService().registerUser(userRegistrationDTO);
             handleRegistrationResult(registrationResult);
 
         } catch (IllegalArgumentException e) {
             remoteServiceHandler.showAlert(e.getMessage(), Alert.AlertType.ERROR);
-        } catch (RemoteException | SQLException e) {
-            handleException("Error during registration", e);
+        } catch (RemoteException e) {
+            handleException(e);
         } finally {
             clearRegistrationFields();
         }
     }
-    private void handleException(String message, Exception exception) {
-        remoteServiceHandler.showAlert(message + ": " + exception.getMessage(), Alert.AlertType.ERROR);
+    private void handleException(Exception exception) {
+        remoteServiceHandler.showAlert("Error during registration" + ": " + exception.getMessage(), Alert.AlertType.ERROR);
     }
     private void validateUserInput() {
         if (nameField.getText().isEmpty() || phoneNumberField.getText().isEmpty() ||
@@ -104,10 +99,10 @@
         confirmPasswordField.clear();
         dateOfBirthPicker.setValue(null);
     }
-    private void handleRegistrationResult(int registrationResult) {
-        if (registrationResult == 0) {
+    private void handleRegistrationResult(boolean registrationResult) {
+        if (registrationResult) {
             remoteServiceHandler.showAlert("User is Already Existed", Alert.AlertType.INFORMATION);
-        } else if (registrationResult == 1) {
+        } else {
             remoteServiceHandler.showAlert("Sign Up Successfully", Alert.AlertType.INFORMATION);
         }
     }
Index: client/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.example</groupId>\n        <artifactId>ChatApp</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n\n    <artifactId>client</artifactId>\n\n    <properties>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.example</groupId>\n            <artifactId>ChatApp</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.28</version>\n        </dependency>\n        <dependency>\n            <groupId>org.example</groupId>\n            <artifactId>shared</artifactId>\n            <version>1.0-SNAPSHOT</version>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.example</groupId>\n            <artifactId>server</artifactId>\n            <version>1.0-SNAPSHOT</version>\n            <scope>compile</scope>\n        </dependency>\n\n\n        <dependency>\n            <groupId>de.jensd</groupId>\n            <artifactId>fontawesomefx-fontawesome</artifactId>\n            <version>4.7.0-9.1.2</version> <!-- Replace with the desired version -->\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.openjfx</groupId>\n                <artifactId>javafx-maven-plugin</artifactId>\n                <version>0.0.8</version> <!-- Replace with the appropriate version -->\n                <configuration>\n                    <mainClass>org.Client.App</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/pom.xml b/client/pom.xml
--- a/client/pom.xml	
+++ b/client/pom.xml	
@@ -58,7 +58,7 @@
                 <artifactId>javafx-maven-plugin</artifactId>
                 <version>0.0.8</version> <!-- Replace with the appropriate version -->
                 <configuration>
-                    <mainClass>org.Client.App</mainClass>
+                    <mainClass>org.Client.ClientApplication</mainClass>
                 </configuration>
             </plugin>
         </plugins>
Index: shared/src/main/java/Model/Enums/UserField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Enums/UserField.java b/server/src/main/java/org/Server/ServerModels/Enums/UserField.java
rename from shared/src/main/java/Model/Enums/UserField.java
rename to server/src/main/java/org/Server/ServerModels/Enums/UserField.java
--- a/shared/src/main/java/Model/Enums/UserField.java	
+++ b/server/src/main/java/org/Server/ServerModels/Enums/UserField.java	
@@ -1,6 +1,4 @@
-package Model.Enums;
-
-import java.util.Date;
+package org.Server.ServerModels.Enums;
 
 public enum UserField {
     USER_ID("userID"),
Index: server/src/main/java/org/Server/Repository/ChatParticipantRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport Interfaces.Repository;\nimport Model.Entities.ChatParticipants;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatParticipantRepository implements Repository<ChatParticipants,Integer> {\n    private final Connection connection;\n\n    public ChatParticipantRepository(Connection connection) {\n        this.connection = connection;\n    }\n    @Override\n    public void save(ChatParticipants participant) throws SQLException {\n        String query = \"INSERT INTO ChatParticipants (ChatID,ParticipantUserID) VALUES (?, ?)\";\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, participant.getChatID());\n            preparedStatement.setInt(2, participant.getParticipantUserID());\n            preparedStatement.executeUpdate();\n        }\n\n    }\n\n    @Override\n    public ChatParticipants findById(Integer id) throws SQLException {\n        String query =\"select * from ChatParticipants where ChatID = ?\";\n        ChatParticipants participant= new ChatParticipants();\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1,id);\n            ResultSet resultSet =preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                participant.setChatID(id);\n                participant.setParticipantUserID(resultSet.getInt(\"ParticipantUserID\"));\n\n            }\n        }\n        return participant;\n    }\n\n\n\n\n    @Override\n    public List<ChatParticipants> findAll() throws SQLException {\n        String query =\"select * from ChatParticipants\";\n        List<ChatParticipants> participants= new ArrayList<>();\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    ChatParticipants participant = new ChatParticipants();\n                    participant.setChatID(resultSet.getInt(\"ChatID\"));\n                    participant.setParticipantUserID(resultSet.getInt(\"ParticipantUserID\"));\n                    participants.add(participant);\n                }\n            }\n        }\n        return participants;\n    }\n\n    @Override\n    public void deleteById(Integer id) throws SQLException {\n        String query = \"DELETE FROM ChatParticipants WHERE ChatID = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, id);\n            preparedStatement.executeUpdate();\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java b/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java
--- a/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java	
+++ b/server/src/main/java/org/Server/Repository/ChatParticipantRepository.java	
@@ -2,8 +2,8 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import Interfaces.Repository;
-import Model.Entities.ChatParticipants;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.ChatParticipants;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
Index: server/src/main/java/org/Server/Repository/ContactsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.Entities.Contact;\nimport Model.Entities.User;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ContactsRepository implements Repository<Contact, Integer> {\n\n    private final Connection myConnection;\n\n    public ContactsRepository(Connection myConnection) {\n        this.myConnection = myConnection;\n    }\n    @Override\n    public void save(Contact contact) throws SQLException {\n        String query = \"INSERT INTO UserContacts (UserID, FriendID, CreationDate) VALUES (?, ?, ?)\";\n\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setInt(1, contact.getUserID());\n            preparedStatement.setInt(2, contact.getFriendID());\n            preparedStatement.setTimestamp(3, contact.getCreationDate());\n            preparedStatement.executeUpdate();\n        }\n    }\n\n    @Override\n    public Contact findById(Integer integer) throws SQLException {\n        return null;\n    }\n    @Override\n    public List<Contact> findAll() throws SQLException {\n        return null;\n    }\n    @Override\n    public void deleteById(Integer integer) throws SQLException {\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/ContactsRepository.java b/server/src/main/java/org/Server/Repository/ContactsRepository.java
--- a/server/src/main/java/org/Server/Repository/ContactsRepository.java	
+++ b/server/src/main/java/org/Server/Repository/ContactsRepository.java	
@@ -1,14 +1,11 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.Entities.Contact;
-import Model.Entities.User;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.Contact;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
-import java.sql.Timestamp;
-import java.util.ArrayList;
 import java.util.List;
 
 public class ContactsRepository implements Repository<Contact, Integer> {
Index: shared/src/main/java/Model/Enums/StatusEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Model/Enums/StatusEnum.java b/server/src/main/java/org/Server/ServerModels/Enums/StatusEnum.java
rename from shared/src/main/java/Model/Enums/StatusEnum.java
rename to server/src/main/java/org/Server/ServerModels/Enums/StatusEnum.java
--- a/shared/src/main/java/Model/Enums/StatusEnum.java	
+++ b/server/src/main/java/org/Server/ServerModels/Enums/StatusEnum.java	
@@ -1,4 +1,4 @@
-package Model.Enums;
+package org.Server.ServerModels.Enums;
 
 public enum StatusEnum {
     ONLINE("Online"),
Index: server/src/main/java/org/Server/Repository/MessageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.Entities.Message;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.sql.Connection;\n\npublic class MessageRepository implements Repository<Message,Integer> {\n    private final Connection connection;\n    public MessageRepository(Connection connection) {\n        this.connection = connection;\n    }\n\n    @Override\n    public void save(Message message) {\n        String query = \"INSERT INTO Messages (SenderID, ReceiverID, MessageContent, IsAttachment) \" +\n                \"VALUES (?, ?, ?, ?)\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n\n            preparedStatement.setInt(1,message.getSenderID());\n            preparedStatement.setInt(2,message.getReceiverID());\n            preparedStatement.setString(3,message.getMessageContent());\n            preparedStatement.setInt(4,message.isAttachment()?1:0);\n\n            preparedStatement.executeUpdate();\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public Message findById(Integer id){\n        String query =\"select * from messages where MessageID = ?\";\n        Message message= new Message();\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n\n            preparedStatement.setInt(1,id);\n\n            ResultSet resultSet =preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                mapToMessage(message, resultSet);\n\n            }\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return message;\n\n    }\n\n    private void mapToMessage(Message message, ResultSet resultSet) throws SQLException {\n        message.setMessageID(resultSet.getInt(\"MessageID\"));\n        message.setSenderID(resultSet.getInt(\"SenderID\"));\n        message.setReceiverID(resultSet.getInt(\"ReceiverID\"));\n        message.setMessageContent(resultSet.getString(\"MessageContent\"));\n        message.setMessageTimestamp(resultSet.getTimestamp(\"MessageTimestamp\"));\n        message.setAttachment(resultSet.getInt(\"IsAttachment\")==1?true:false);\n    }\n\n    @Override\n    public List<Message> findAll(){\n        List <Message> messagesList = new ArrayList<>();\n        String query =\"select * from messages\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                Message message = new Message();\n                mapToMessage(message, resultSet);\n                messagesList.add(message);\n\n            }\n\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return messagesList;\n    }\n\n    @Override\n    public void deleteById(Integer id){\n\n        String query = \"DELETE FROM Messages \" +\n                \"WHERE MessageID = ?\";\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n                preparedStatement.setInt(1,id);\n                 preparedStatement.executeUpdate();\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/MessageRepository.java b/server/src/main/java/org/Server/Repository/MessageRepository.java
--- a/server/src/main/java/org/Server/Repository/MessageRepository.java	
+++ b/server/src/main/java/org/Server/Repository/MessageRepository.java	
@@ -1,7 +1,7 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.Entities.Message;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.Message;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
Index: server/src/main/java/org/Server/Repository/UserNotificationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.Entities.User;\nimport Model.Entities.UserNotification;\n\nimport java.sql.Connection;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.sql.*;\n\npublic class UserNotificationRepository implements Repository<UserNotification,Integer> {\n    private final Connection myConnection;\n\n    public UserNotificationRepository(Connection myConnection) {\n        this.myConnection = myConnection;\n    }\n    @Override\n    public void save(UserNotification entity) throws SQLException {\n        String query = \"INSERT INTO UserNotifications (ReceiverID, SenderID, NotificationMessage, NotificationSentDate) \" +\n                \"VALUES (?, ?, ?, ?)\";\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setInt(1, entity.getReceiverID());\n            preparedStatement.setInt(2, entity.getSenderID());\n            preparedStatement.setString(3, entity.getNotificationMessage());\n            preparedStatement.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\n\n            preparedStatement.executeUpdate();\n        }\n    }\n\n    @Override\n    public UserNotification findById(Integer integer) throws SQLException {\n        return null;\n    }\n    @Override\n    public List<UserNotification> findAll() throws SQLException {\n        return null;\n    }\n    @Override\n    public void deleteById(Integer notificationId) throws SQLException {\n        String query = \"DELETE FROM UserNotifications WHERE NotificationID = ?\";\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setInt(1, notificationId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<UserNotification> getInvitationsForUser(int userID) throws SQLException {\n\n        List<UserNotification> userNotifications = new ArrayList<>();\n        String query = \"SELECT * FROM UserNotifications WHERE ReceiverID = ?\";\n        try (PreparedStatement preparedStatement = myConnection.prepareStatement(query)) {\n            preparedStatement.setInt(1, userID); // Set the user ID parameter\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    userNotifications.add(getNotificationFromResultSet(resultSet));\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return  userNotifications;\n    }\n    public UserNotification getNotificationFromResultSet(ResultSet resultSet) throws SQLException {\n        UserNotification userNotification = new UserNotification();\n        userNotification.setNotificationID(resultSet.getInt(\"NotificationID\"));\n        userNotification.setReceiverID(resultSet.getInt(\"ReceiverID\"));\n        userNotification.setSenderID(resultSet.getInt(\"SenderID\"));\n        userNotification.setNotificationMessage(resultSet.getString(\"NotificationMessage\"));\n        userNotification.setNotificationSentDate(Timestamp.valueOf(resultSet.getTimestamp(\"NotificationSentDate\").toLocalDateTime()));\n\n        return userNotification;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/UserNotificationRepository.java b/server/src/main/java/org/Server/Repository/UserNotificationRepository.java
--- a/server/src/main/java/org/Server/Repository/UserNotificationRepository.java	
+++ b/server/src/main/java/org/Server/Repository/UserNotificationRepository.java	
@@ -1,8 +1,7 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.Entities.User;
-import Model.Entities.UserNotification;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.UserNotification;
 
 import java.sql.Connection;
 import java.util.ArrayList;
Index: server/src/main/java/org/Server/Repository/AttachmentReopsitory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.Server.Repository;\n\nimport Interfaces.Repository;\nimport Model.Entities.Attachment;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AttachmentReopsitory implements Repository<Attachment,Integer>{\n    private final Connection connection;\n    public AttachmentReopsitory(Connection connection){\n        this.connection = connection;\n    }\n\n    @Override\n    public void save(Attachment attachment){\n        String query = \"INSERT INTO attachment (AttachmentID,MessageID,Attachment) VALUES (?, ?,?)\";\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, attachment.getAttachmentID());\n            preparedStatement.setInt(2, attachment.getMessageID());\n            preparedStatement.setBytes(3, attachment.getAttachment());\n            preparedStatement.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public Attachment findById(Integer id) {\n        String query = \"select * from attachment where AttachmentID = ?\";\n        Attachment attachment = new Attachment();\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, id);\n           try (ResultSet resultSet = preparedStatement.executeQuery()) {\n               if (resultSet.next()) {\n                   attachment.setAttachmentID(id);\n                   attachment.setMessageID(resultSet.getInt(\"MessageID\"));\n                   attachment.setAttachment(resultSet.getBytes(\"Attachment\"));\n               }\n           }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return attachment;\n    }\n\n    @Override\n    public List<Attachment> findAll() {\n        String query = \"select * from attachment\";\n        List<Attachment> attachments = new ArrayList<>();\n\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            try (ResultSet resultSet = preparedStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    Attachment attachment = new Attachment();\n                    attachment.setAttachmentID(resultSet.getInt(\"AttachmentID\"));\n                    attachment.setMessageID(resultSet.getInt(\"MessageID\"));\n                    attachment.setAttachment(resultSet.getBytes(\"Attachment\"));\n                    attachments.add(attachment);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return attachments;\n    }\n\n    @Override\n    public void deleteById(Integer id) {\n        String query = \"delete from attachment where AttachmentID = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, id);\n            preparedStatement.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java b/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java
--- a/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java	
+++ b/server/src/main/java/org/Server/Repository/AttachmentReopsitory.java	
@@ -1,7 +1,7 @@
 package org.Server.Repository;
 
-import Interfaces.Repository;
-import Model.Entities.Attachment;
+import org.Server.RepoInterfaces.Repository;
+import org.Server.ServerModels.ServerEntities.Attachment;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
Index: shared/src/main/java/Interfaces/ServiceFactoryI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Interfaces/ServiceFactoryI.java b/shared/src/main/java/Interfaces/ServicesFactoryInterface.java
rename from shared/src/main/java/Interfaces/ServiceFactoryI.java
rename to shared/src/main/java/Interfaces/ServicesFactoryInterface.java
--- a/shared/src/main/java/Interfaces/ServiceFactoryI.java	
+++ b/shared/src/main/java/Interfaces/ServicesFactoryInterface.java	
@@ -3,7 +3,7 @@
 import java.rmi.Remote;
 import java.rmi.RemoteException;
 
-public interface ServiceFactoryI extends Remote {
-    UserServiceFactoryI createUserService() throws RemoteException;
+public interface ServicesFactoryInterface extends Remote {
+    RemoteUserService createUserService() throws RemoteException;
 
 }
Index: shared/src/main/java/Interfaces/Repository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Interfaces/Repository.java b/server/src/main/java/org/Server/RepoInterfaces/Repository.java
rename from shared/src/main/java/Interfaces/Repository.java
rename to server/src/main/java/org/Server/RepoInterfaces/Repository.java
--- a/shared/src/main/java/Interfaces/Repository.java	
+++ b/server/src/main/java/org/Server/RepoInterfaces/Repository.java	
@@ -1,7 +1,5 @@
-package Interfaces;
-import Model.Entities.User;
+package org.Server.RepoInterfaces;
 
-import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.List;
 
Index: shared/src/main/java/Interfaces/RemoteUserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/main/java/Interfaces/RemoteUserService.java b/shared/src/main/java/Interfaces/RemoteUserService.java
new file mode 100755
--- /dev/null	
+++ b/shared/src/main/java/Interfaces/RemoteUserService.java	
@@ -0,0 +1,13 @@
+package Interfaces;
+
+import Model.DTO.UserLoginDTO;
+import Model.DTO.UserRegistrationDTO;
+
+
+import java.rmi.Remote;
+import java.rmi.RemoteException;
+
+public interface RemoteUserService extends Remote {
+    public boolean registerUser(UserRegistrationDTO user) throws RemoteException;
+    public boolean signInUser(UserLoginDTO userLoginDTO) throws RemoteException;
+}
Index: server/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module server {\n    exports org.Server.Service;\n    exports org.Server.Service.User;\n    exports org.Server.Service.Factories;\n    exports org.Server.Service.Contacts;\n    exports org.Server;\n    exports org.Server.GUI.Controllers;\n    opens org.Server.GUI.Controllers;\n\n    requires java.rmi;\n    requires java.sql;\n    requires shared;\n    requires mysql.connector.java;\n    requires java.naming;\n    requires javafx.controls;\n    requires javafx.fxml;\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/module-info.java b/server/src/main/java/module-info.java
--- a/server/src/main/java/module-info.java	
+++ b/server/src/main/java/module-info.java	
@@ -1,8 +1,5 @@
 module server {
-    exports org.Server.Service;
-    exports org.Server.Service.User;
-    exports org.Server.Service.Factories;
-    exports org.Server.Service.Contacts;
+
     exports org.Server;
     exports org.Server.GUI.Controllers;
     opens org.Server.GUI.Controllers;
diff --git a/client/src/main/resources/styles/Register.css b/client/src/main/resources/ClientStyles/Register.css
rename from client/src/main/resources/styles/Register.css
rename to client/src/main/resources/ClientStyles/Register.css
diff --git a/client/src/main/resources/styles/login.css b/client/src/main/resources/ClientStyles/login.css
rename from client/src/main/resources/styles/login.css
rename to client/src/main/resources/ClientStyles/login.css
